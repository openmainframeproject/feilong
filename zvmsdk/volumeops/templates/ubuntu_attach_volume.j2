#!/bin/bash
# Generated by jinja2 template
fcp_list="{{ fcp_list }}"
# lun example: 0x0100000000000000
lun="{{ lun }}"
# 1. if the lun id less than 256,
#    the file under /dev/disk/by-path/ will as below,
#    take 'lun id = 0' as example:
#    ccw-0.0.5c03-fc-0x5005076802400c1a-lun-0, the the lun id is decimal.
# 2. if the lun id is equal or more than 256,
#    the file under /dev/disk/by-path/ will as below,
#    take 'lun id = 256' as example:
#    ccw-0.0.1a0d-fc-0x500507680b26bac7-lun-0x0100000000000000,
#    the lun id is hex.
lun_id="{{ lun_id }}"
target_filename="{{ target_filename }}"

echo "Enter UBUNTU attach script with parameters: FCP list:${fcp_list[@]}, LUN:$lun lun_id:$lun_id, target_filename:$target_filename."

# because jinja2's problem, we can not use # to count the array_size
fcp_count=0
for fcp in ${fcp_list[@]}
do
    echo "fcp: $fcp"
    fcp_count=$((fcp_count+=1))
done

if [[ $fcp_count -eq 0 ]]; then
    echo "fcp_list is empty, exit with code 2."
    exit 2
fi

# see if zfcp is enable
enable_zfcp_mod=`lsmod | grep zfcp`
if [ -z "$enable_zfcp_mod" ];then
    modprobe zfcp
else
    echo "zfcp mode is already enabled"
fi

# online fcp devices
for fcp in ${fcp_list[@]}
do
    echo "online fcp $fcp"
    /sbin/chzdev zfcp-host $fcp -e
done

# send an iSCSI scan request with given host and optionally the ctl 
# the ctl means, c: channel,default to -
#                t: target, default to -
#                l: lun, default to -
all_hosts=(`ls /sys/class/scsi_host/`)
for host in ${all_hosts[@]}
do
    echo "- - -" > /sys/class/scsi_host/$host/scan
    echo "scan request to host $host sent."
done

# the number WWPNs is generated dynamically
# so we need to get them from the filesystem
declare -a ActiveWWPNs
FoundDiskPath=0
for fcp in ${fcp_list[@]}
do
    ActiveWWPNs=(`ls /sys/bus/ccw/drivers/zfcp/0.0.$fcp/ | grep "0x"`)
    echo "Got WWPNs: ${ActiveWWPNs[@]} for FCP device: $fcp"
    
    # If auto-discovery of LUNs is disabled on s390 platforms
    # luns need to be added to the configuration through
    # the unit_add interface
    AutoLunScan=`cat /sys/module/zfcp/parameters/allow_lun_scan`
    if [[ "$AutoLunScan" != "Y" ]]; then
        echo "Auto LUN scan is disabled, so manually configure the SCSI devices."
        for wwpn in ${ActiveWWPNs[@]}
        do
            /sbin/chzdev zfcp-lun 0.0.$fcp:$wwpn:$lun -e
        done
    fi

    if [[ $(which udevadm 2> /dev/null) != '' ]]; then
        udevadm settle
    else
        udevsettle
    fi

    # wait for the devices ready
    # timeout set to 10 seconds
    Timeout=10
    while [ $FoundDiskPath -eq 0 ]
    do
        # if timeout less or equal 0 seconds, means no time left
        if [ $Timeout -le 0 ]; then
            echo "waiting for devices ready timed out after 10 seconds."
            break
        fi

        ActiveWWPNs=(`ls /sys/bus/ccw/drivers/zfcp/0.0.$fcp/ | grep "0x"`)
        echo "Got WWPNs: ${ActiveWWPNs[@]} for FCP device: $fcp before try disk path."
        # loop all the WWPNs to found the alive device
        for j in ${ActiveWWPNs[@]}
        do
            x="/dev/disk/by-path/ccw-0.0.$fcp-fc-$j-lun-$lun_id"
            # the x would be like:
            # ccw-0.0.1d13-zfcp-0x5005076306035388:0x4014400400000000
            echo "try disk path:$x"
            if [ -e $x ]; then
                diskPath=$x
                FoundDiskPath=1
                break
            fi
        done
        # if devices still not ready, wait another 5 seconds and retry
        if [ $FoundDiskPath -eq 0 ]; then
            sleep 1
            Timeout=$((Timeout-=1))
            echo "sleep 1 second to wait the devices ready, timeout left: $Timeout"
        fi
    done
done

if [ $FoundDiskPath -eq 1 ]; then
    echo "The storage device is ready and found disk path: $diskPath."
else
    echo "error happens during attachment because the device file of $fcp not found, will exit with code 1."
    exit 1
fi

WWID=`/lib/udev/scsi_id --page 0x83 --whitelisted $diskPath`
echo "scsi_id command get WWID:$WWID for device $diskPath."

ConfigLib="/lib/udev/rules.d/56-zfcp.rules"
if [ -e "$ConfigLib" ]
then
    ConfigFile="/lib/udev/rules.d/56-zfcp.rules"
else
    ConfigFile="/etc/udev/rules.d/56-zfcp.rules"
fi

LinkItem="KERNEL==\"dm-*\", ENV{DM_UUID}==\"mpath-$WWID\", SYMLINK+=\"$target_filename\""
echo -e $LinkItem >> $ConfigFile

udevadm control --reload
udevadm trigger --sysname-match=dm-*

exit 0

