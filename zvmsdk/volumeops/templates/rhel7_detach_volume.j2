#!/bin/bash
#Generated by jinja2 template

fcp_list="{{ fcp_list }}"
lun="{{ lun }}"
target_filename="{{ target_filename }}"
is_last_volume="{{ is_last_volume }}"

echo "Enter RHEL7 detach script with parameters: FCP list:${fcp_list[@]}, LUN:$lun, target_filename:$target_filename, is_last_volume: $is_last_volume."

# the device name under /dev/disk/by-path, for example: ccw-0.0.1a13-zfcp-0x500507680b21bac6:0x0000000000000000
SourceDevices=(`ls /dev/disk/by-path/ | grep "ccw-0\.0\..*-zfcp-.*:$lun"`)
echo "get source devices: ${SourceDevices[@]}"

# the wwid of device

WWID=$(/lib/udev/scsi_id --page 0x83 --whitelisted /dev/disk/by-path/${SourceDevices[0]})
echo "scsi_id command get WWID:$WWID for device: ${SourceDevices[0]} under /dev/disk/by-path"
# flush IO for devices
RealPath=`readlink -f /dev/disk/by-path/${SourceDevices[0]}`
blockdev --flushbufs $RealPath > /dev/null

# exit code default to 0, because WWIDs may be empty
exit_code=0

# get the map name of the WWID
# then use multipath -f <map name> to flush the device
map_name=$(multipath -l $WWID -v 1)
echo "get map name: $map_name"
output=$(multipath -f $map_name 2>&1)
exit_code=$?
# error output not empty, means error happened
# and the error 'in use' and 'must provode a map name'
# of multipath -f will return same exit code 1
# so diff them, we will ingore the error of 'must provide a map name'
if [ "$output" ]; then
    if [ "$(echo $output | grep -i 'must provide a map name')" ]; then
        echo "ignore error on WWID $WWID and Lun $lun:$output"
        exit_code=0
    elif [ "$(echo $output | grep -i 'in use')" ]; then
        echo "device with WWID $WWID and Lun $lun is use:$output"
        exit_code=1
    else
        echo "unknown error on device with WWID $WWID and Lun $lun:$output"
        exit_code=2
    fi
fi
echo "exit code for multipath -f: $exit_code"
#if above code didn't succeed, exit now.
if [[ $exit_code != 0 ]]; then
    exit $exit_code
fi

# get the real WWPNs in the file system
declare -a ActiveWWPNs
for fcp in ${fcp_list[@]}
do
    ActiveWWPNs=(`ls /sys/bus/ccw/drivers/zfcp/0.0.$fcp/ | grep "0x"`)
    echo "Got WWPNs: ${ActiveWWPNs[@]} for FCP device: $fcp"

    # If auto-discovery of LUNs is disabled on s390 platforms
    # luns need to be removed from the configuration through
    # the unit_remove interface
    AutoScan=`cat /sys/module/zfcp/parameters/allow_lun_scan`
    if [[ "$AutoScan" != "Y" ]]; then
        for wwpn in ${ActiveWWPNs[@]}
        do
            echo "$lun" > /sys/bus/ccw/drivers/zfcp/0.0.$fcp/$wwpn/unit_remove
            echo "auto lun scan is disabled, manully deconfigure LUN $lun and WWPN $wwpn on FCP device $fcp"
        done
    fi

    # if is last volume, then should offline the FCP
    if [ $is_last_volume -eq 1 ]; then
        echo "this is last volume, will offline fcp device $fcp"
        /sbin/chccwdev -d $fcp > /dev/null
    fi

    # remove configuration items in zfcp.conf
    for WWPN in ${ActiveWWPNs[@]}
    do
        echo "remove WWPN $WWPN for $fcp in zfcp.conf"
        sed -i -e "/0.0.$fcp $WWPN $lun/d" /etc/zfcp.conf
    done
done

# remove udev rules and reload
TargetFile="$target_filename"
ConfigLib="/lib/udev/rules.d/56-zfcp.rules"
if [ -e "$ConfigLib" ]
then
    ConfigFile="/lib/udev/rules.d/56-zfcp.rules"
else
    ConfigFile="/etc/udev/rules.d/56-zfcp.rules"
fi
sed -i -e /SYMLINK+=\"$TargetFile\"/d $ConfigFile

# reload udev rules
udevadm control --reload
udevadm trigger --sysname-match=dm-*

exit 0

