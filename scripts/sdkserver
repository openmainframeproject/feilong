#!/usr/bin/python
# Copyright 2017 IBM Corp.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.


import json
import six
import socket
import sys
import syslog
import threading

from zvmsdk import api
from zvmsdk import config
from zvmsdk import exception
from zvmsdk import returncode


CONF = config.CONF


class SDKServer(object):
    def __init__(self):
        self.sdkapi = api.SDKAPI()
        syslog.openlog(logoption=syslog.LOG_PID)
        self.server_socket = None

    def log_error(self, msg):
        msg = "ERROR: " + msg
        syslog.syslog(syslog.LOG_ERR, msg)

    def log_info(self, msg):
        msg = "INFO: " + msg
        syslog.syslog(syslog.LOG_INFO, msg)

    def log_warn(self, msg):
        msg = "WARNING: " + msg
        syslog.syslog(syslog.LOG_WARNING, msg)

    def construct_internal_error(self, msg):
        self.log_error(msg)
        error = returncode.errors['internal']
        results = error[0]
        results['modID'] = returncode.ModRCs['sdkserver']
        results.update({'rs': 1,
                        'errmsg': error[1][1] % {'msg': msg},
                        'output': ''})
        return results

    def construct_api_name_error(self, msg):
        self.log_error(msg)
        error = returncode.errors['API']
        results = error[0]
        results['modID'] = returncode.ModRCs['sdkserver']
        results.update({'rs': 1,
                        'errmsg': error[1][1] % {'msg': msg},
                        'output': ''})
        return results

    def send_results(self, client, results):
        """ send back results to client in the json format of:
        {'overallRC': x, 'modID': x, 'rc': x, 'rs': x, 'errmsg': 'msg',
         'output': 'out'}
        """
        json_results = json.dumps(results)
        sent = 0
        total_len = len(json_results)
        got_error = False
        while (sent < total_len):
            this_sent = client.send(json_results[sent:])
            if this_sent == 0:
                got_error = True
                break
            sent += this_sent
        if got_error or sent != total_len:
            self.log_error("Failed to send back clients the results: %s" %
                      json_results)
        else:
            self.log_info("Results sent back to client successfully.")

    def serve_API(self, client):
        """ Read client request and call target SDK API"""
        self.log_info("new thread started to handle client request")
        results = None
        try:
            data = client.recv(4096)
            # When client failed to send the data or quit before sending the
            # data, server side would receive null data.
            # In such case, server would not send back any info and just
            # terminate this thread.
            if not data:
                self.log_warn("Failed to receive data from client.")
                return
            api_data = json.loads(data)

            # API_data should be in the form [funcname, args_list, kwargs_dict]
            if not isinstance(api_data, list) or len(api_data) != 3:
                msg = "SDK server got wrong input: %s" % data
                results = self.construct_internal_error(msg)
                return

            # Check called API is supported by SDK
            (func_name, api_args, api_kwargs) = api_data
            self.log_info("func: %s, args: %s, kwargs: %s" % (func_name,
                                                              str(api_args),
                                                              str(api_kwargs)))
            try:
                api_func = getattr(self.sdkapi, func_name)
            except AttributeError:
                msg = "SDK server got wrong API name: %s." % func_name
                results = self.construct_api_name_error(msg)
                return

            # invoke target API function
            return_data = api_func(*api_args, **api_kwargs)
        except exception.SDKBaseException as e:
            # get the error info from exception attribute
            # All SDKbaseexception should eventually has a
            # results attribute defined which can be used by
            # sdkserver here
            if e.results is None:
                msg = ("SDK server got exception without results defined: "
                       "%s" % e.format_message())
                results = self.construct_internal_error(msg)
            else:
                results = {'overallRC': e.results['overallRC'],
                           'modID': None,
                           'rc': e.results['rc'],
                           'rs': e.results['rs'],
                           'errmsg': e.format_message(),
                           'output': ''}
        except Exception as e:
            msg = ("SDK server got unexpected exception: "
                   "%s" % six.text_type(e))
            results = self.construct_internal_error(msg)
        else:
            if not return_data:
                return_data = ''
            results = {'overallRC': 0, 'modID': None,
                       'rc': 0, 'rs': 0,
                       'errmsg': '',
                       'output': return_data}
        finally:
            # Send back the final results
            try:
                if results is not None:
                    self.send_results(client, results)
            finally:
                # Close the connection to make sure the thread socket got
                # closed even when it got unexpected exceptions.
                client.close()

    def setup(self):
        # create server socket
        try:
            self.server_socket = socket.socket(socket.AF_INET,
                                               socket.SOCK_STREAM)
        except socket.error as msg:
            self.log_error("Failed to create SDK server socket: %s" % msg)
            sys.exit(1)

        server_sock = self.server_socket
        # bind server address and port
        host = CONF.sdkserver.bind_addr
        port = CONF.sdkserver.bind_port
        try:
            server_sock.bind((host, port))
        except socket.error as msg:
            self.log_error("Failed to bind to (%s, %d), reason: %s" %
                             (host, port, msg))
            server_sock.close()
            sys.exit(1)

        # Start listening
        server_sock.listen(5)
        self.log_info("SDK server now listening")

    def run(self):
        # Keep running in a loop to handle client connections
        while True:
            # Wait client connection
            conn, addr = self.server_socket.accept()
            self.log_info("Connected with %s:%s" % (addr[0], addr[1]))
            # Start a new thread to call the API
            thread = threading.Thread(target=self.serve_API, args=(conn,))
            thread.start()


def start_daemon():
    server = SDKServer()
    try:
        server.setup()
        server.run()
    finally:
        # This finally won't catch exceptions from child thread, so
        # the close here is safe.
        if server.server_socket is not None:
            server.log_info("Closing the server socket.")
            server.server_socket.close()


if __name__ == '__main__':
    start_daemon()
