#!/bin/bash
###############################################################################
# Copyright 2020 IBM Corp.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.
#                            #
###############################################################################
# COMPONENT: refresh_bootmap                                                  #
#                                                                             #
# Refresh bootmap info of the specific device, the device can be FCP, eckd,   #
# etc. Currently, the script support FCP device only.                         #
###############################################################################

source /opt/zthin/lib/zthinshellutils

###############################################################################
### FUNCTIONS #################################################################
###############################################################################

function printCMDDescription {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}
  # @Description:
  #   Prints a short description of this command.
  # @Overrides:
  #   printCMDDescription{} in "zthinshellutils".
  # @Code:
  echo -n "Refresh bootmap info of the specific device. "
  echo    "Currently, the script only support FCP device."
} #printCMDDescription{}

function printCMDUsage {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}
  # @Description:
  #   Prints a short description of this command.
  # @Overrides:
  #   printCMDUsage{} in "zthinshellutils".
  # @Code:
  echo -n "Usage: $CMDNAME OPTIONS"
  [[ $namedArgListing ]] && echo -n " ${namedArgListing}" |
                            sed 's/\[--/ \\\n       '"${CMDNAME//?/ }"' [--/g'
  if [[ $positionalArgListing ]]; then
    echo " ${positionalArgListing}" |
      sed 's/ / \\\n       '"${CMDNAME//?/ }"' /g'
  else
    echo ''
  fi
  echo "${optionHelp}"
} #printCMDUsage

function cleanup_umountdir_and_disconnect_fcp {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}
  # @Description:
  #   Umount dir and cleanup all FCP devices.
  inform "Begin to cleanup umount dir."
  umount $deviceMountPoint/proc > /dev/null
  umount $deviceMountPoint/sys > /dev/null
  # umount $deviceMountPoint/run > /dev/null
  umount $deviceMountPoint/dev > /dev/null
  umount $deviceMountPoint > /dev/null
  rm -rf $deviceMountPoint
  inform "Finish cleanuping umount dir."

  cleanup_fcpdevices
} # cleanup_umountdir_and_disconnect_fcp

function cleanup_fcpdevices {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}
  # @Description:
  inform "Finish disconnecting FCPs."
  inform "Begin to refresh multipath bindings."
  # Don't need to judge if the multipath_enabled exist,
  # if it doesn't exist, the $multipath_enabled will be None.
  if [[ $multipath_enabled == 1 ]]; then
    inform "Cleaning up multipath bindings and wwids."
    multipath_output=$(multipath -ll 2>&1)
    inform "multipath output: ${multipath_output}."
    # delete the wwid and refresh multipath map
    map_name=$(multipath -l $wwid -v 1)
    rc=$?
    if [[ ( $rc -eq 0 ) && ( "$map_name" != "" ) ]]; then
        inform "multipath wwid: $wwid, map name: $map_name."
        wwid_out=`multipath -w $map_name 2>&1`
        rc1=$?
        # add retry according to multipath -h:
        # -R num: number of times to retry removes of in-use devices 
        flush_out=`multipath -R 3 -f $map_name 2>&1`
        rc2=$?
        if [[ ( $rc1 -ne 0 ) || ( $rc2 -ne 0 ) ]]; then
            inform "Failed to cleanup $map_name. wwid rc1: $rc1, output: $wwid_out. 
            flush rc2: $rc2, output: $flush_out."
        else
            inform "multipath $map_name flushed successfully."
        fi
        # cleanup multipath leftover if any
        if [[ ( $rc2 -ne 0 ) ]]; then
            inform 'start: clean multipath leftover'
            cmd_out=$(dmsetup info)
            inform "dmsetup info output: ${cmd_out}."
            # check whether any path exists for current multipath device
            # path_num examples:
            #   0: if no path
            #   1: if 1 path exists
            #   2: if 2 paths exist
            path_num=$(multipathd show map $map_name json | grep -c '"dev"')
            # delete paths if any
            if [[ ( $path_num -ne 0 ) ]]; then
                # leftover_paths examples:
                #   sda    : if 1 path exists
                #   sda sdb: if 2 paths exist
                leftover_paths=$(multipathd show map $map_name json | awk '/\"dev\"/ {split($3,a,"\""); print a[2]}')
                inform "leftover_paths output: ${leftover_paths}."
                for p in ${leftover_paths[@]}
                do
                    echo offline > /sys/block/$p/device/state
                    echo 1 > /sys/block/$p/device/delete
                    inform 'path $p deleted'
                done
            fi
            # delete multipath device itself
            # first, try multipath -f. 
            cmd_out=$(multipath -f $map_name 2>&1)
            # if multipath device already gone after deleting paths above,
            # then rc is 0
            rc=$?
            inform "multipath -f output: ${cmd_out}."
            if [[ ( $rc -ne 0 ) ]]; then
                # second, try dmsetup suspend/remove
                cmd_out=$(dmsetup suspend $map_name 2>&1)
                inform "dmsetup suspend output: ${cmd_out}."
                cmd_out=$(dmsetup remove $map_name -f 2>&1)
                rc=$?
                inform "dmsetup remove output: ${cmd_out}."
                if [[ ( $rc -ne 0 ) ]]; then
                    # third, try multipath -f again
                    cmd_out=$(multipath -f $map_name 2>&1)
                    inform "multipath -f output: ${cmd_out}."
                fi
            fi
            inform 'end: clean multipath leftover'
            cmd_out=$(dmsetup info)
            inform "dmsetup info output: ${cmd_out}." 
        fi
    else
        inform "Failed to get the multipath map name or map name is null for wwid: $wwid. rc is $rc."
    fi
    if [[ -f /etc/multipath/bindings ]]; then
        sed -i "/$wwid/d" /etc/multipath/bindings
    fi
    lszfcp_output=$(lszfcp -HD 2>&1)
    inform "lszfcp output: ${lszfcp_output}"
    multipath_output=$(multipath -ll 2>&1)
    inform "multipath output: ${multipath_output}."
  fi
  inform "Finish refreshing multipath bindings."
  # Disconnect all FCPs
  inform "Begin to disconnect FCPs"
  for i in "${!fcps[@]}"
  do
    if [[ -z "$wwpns" ]];then
      inform "Setting FCP device ${fcps[$i]} offline."
      chccwdevDevice ${fcps[$i]} "offline"
      output=`/opt/zthin/bin/smcli Image_Device_Undedicate -T $zthinUserID -v ${fcps[$i]} 2>&1`
      if [[ $? != 0 ]]; then
          inform "Undedicate FCP device ${fcps[$i]} fails, reason: $output"
      else
          inform "Undedicate FCP device ${fcps[$i]} successfully."
      fi
    else
      for j in "${!wwpns[@]}"
      do
        inform "Disconnect FCP device: ${fcps[$i]}"
        disconnectFcp ${fcps[$i]} 0x${wwpns[$j]} ${lun}
      done
    fi
  done
} #cleanup_fcpdevices

function printCMDExamples {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}
  # @Description:
  #   Prints a short description of this command.
  # @Overrides:
  #   printCMDDescription{} in "zthinshellutils".
  # @Code:
  echo "Example:
  ./refresh_bootmap.sh --fcpchannel="5d71" --wwpn="5005076802100C1B" --lun=0000000000000000
  ./refresh_bootmap.sh --fcpchannel="5d71,5d72" --wwpn="5005076802100C1B,5005076802200C1B,5005076802300C1B,5005076802400C1B,5005076802400C1A,5005076802300C1A,5005076802200C1A,5005076802100C1A" --lun=0000000000000000" 
} #printCMDDescription

function parseArgs {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}
  # @Description:
  #   Parses and checks command-line arguments.
  # @Code:
  # Non-local variables in this function are intentionally non-local.
  isOption -h --help "         Print this help message."   && printHelp='true'
  isOption -v --verbose "      Print verbose output."      && verbose='-v'
  isOption -x --debug "        Print debugging output."    && debug='-x'
  isOption -t --type "         Device type. The default device typs is fcp and fcp is the only currently supported type."
  isOption -f --fcpchannel "   FCP channel IDs. Support multi fcpchannel, split by ','."
  isOption -w --wwpn "         World Wide Port Name IDs. Support multi wwpn, split by ',' Example: 5005076802400c1b"
  isOption -l --lun "          Logical Unit Number ID. Example: 0000000000000000"
  isOption -s --skipzipl "     Whether skip ZIPL, if YES, only return physical World Wide Port Name IDs"

  if [[ $printHelp ]]; then
    printHelp
    exit 0
  fi

  for i in "$@"
  do
  case $i in
      -t|--type=*)
      device_type="${i#*=}"
      shift # past argument=value
      ;;
      -f|--fcpchannel=*)
      fcpchannel="${i#*=}"
      shift # past argument=value
      ;;
      -w|--wwpn=*)
      wwpn="${i#*=}"
      shift # past argument=value
      ;;
      -l|--lun=*)
      lun="${i#*=}"
      shift # past argument=value
      ;;
      -s|--skipzipl=*)
      skipzipl="${i#*=}"
      shift # past argument=value
      ;;
      --default)
      DEFAULT=YES
      shift # past argument with no value
      ;;
      *)
      printError "Unknow option: $i." 
      exit 3
      ;;
  esac
  done

  # Set default device type to FCP if not specific.
  device_type=${device_type:-fcp}
  device_type=$(echo ${device_type} | tr '[:upper:]' '[:lower:]')
} #parseArgs

function checkSanity {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}
  # @Description:
  #   Performs basic checks to ensure that a successful deploy can reasonably
  #   be expected.
  if [[ $device_type = 'fcp' ]]; then
    if [[ ! $lun || ! $fcpchannel ]];then
        printError "Please specify lun and fcpchannel."
        exit 4
    fi
    # Intentionally non-local variable.
    format='FCP'
  elif [[ $device_type = 'fba' ]]; then
    # We don't support fba now.
    :
  else
    printError "Unknown device type."
    exit 5
  fi
} #checkSanity

function printLogs {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}
  # @Description:
  #   print logs essential to debug issues before exiting with errors
  # lszfcp -HD
  lszfcp_output=$(lszfcp -HD 2>&1)
  inform "lszfcp output: ${lszfcp_output}."
  # lsluns
  lsluns_output=$(lsluns 2>&1)
  inform "lsluns output: ${lsluns_output}."
  # ls /dev/disk/by-path
  disk_by_path_folder=$(ls /dev/disk/by-path/)
  inform "/dev/disk/by-path/ folder content: ${disk_by_path_folder}."
  # ls /dev/disk/by-id
  disk_by_id_folder=$(ls /dev/disk/by-id/)
  inform "/dev/disk/by-id/ folder content: ${disk_by_id_folder}."
  # multipath -ll
  multipath_output=$(multipath -ll 2>&1)
  inform "multipath output: ${multipath_output}."
} #printLogs

function checkMultipath {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}
  # @Description:
  #   Check whether multipath is enabled by checking the multipathd service status
  #   Set the multipath_enabled variable according to the result.
  multipath_enabled=0
  service_output=`systemctl status multipathd | grep "active (running)"`
  if [[ $? -eq 0 ]]; then
      inform "multipathd service is active and running."
      multipath_enabled=1
  fi
} #checkMultipath

function truncaterdzfcp {
	: SOURCE: ${BASH_SOURCE}
	: STACK:  ${FUNCNAME[@]}
	# @Description:
	#   select 8 paths from all the valid paths to get the rd.zfcp kernel command line
	#   select combinations based on the rule: 
	#   each FCP should be covered by at least one path in rd.zfcp so that all the FCPs
	#   will be automatically online when vm is started
    rd_zfcp=""
    wwpn_idx=0
    selected_paths=0
    valid_fcps=$(echo ${!paths_dict[*]})
	while [[ $selected_paths -lt 8 ]]
	do
		inform "checking with wwpn_index: $wwpn_idx."
		# for each fcp, get the wwpn corresponding to wwpn_idx
		for fcp in ${valid_fcps[@]}
		do
			wwpns=(${paths_dict[$fcp]})
			if [[ $wwpn_idx -lt ${#wwpns[@]} ]]; then
				wwpn=${wwpns[$wwpn_idx]}
				rd_zfcp+="rd.zfcp=0.0."$fcp,0x$wwpn,$lun" "
				((selected_paths=$selected_paths+1))
			fi
			# break when 8 paths found
			if [[ $selected_paths -eq 8 ]]; then
				break
			fi
		done
		((wwpn_idx=$wwpn_idx+1))
	done
}

function probePartition {
    : SOURCE: ${BASH_SOURCE}
    : STACK:  ${FUNCNAME[@]}
    # @Description:
    #   Run partprobe to try to find the partition
    # @Parameters:
    #   None
    # @Returns:
    #   None
    # ls /dev/disk/by-path

    # get the devPath under /dev/mapper
    map_name=$(multipath -l $wwid -v 1)
    rc=$?
    if [[ ( $rc -eq 0 ) && ( "$map_name" != "" ) ]]; then
        devPath="/dev/mapper/$map_name"
    else
        inform "Failed to get map_name before partprobe, exit partprobe"
        return
    fi

    disk_by_path_folder=$(ls /dev/disk/by-path/)
    inform "Before partprobe, /dev/disk/by-path/ folder content: ${disk_by_path_folder}."
    # ls /dev/disk/by-id
    disk_by_id_folder=$(ls /dev/disk/by-id/)
    inform "Before partprobe, /dev/disk/by-id/ folder content: ${disk_by_id_folder}."
    # ls /dev/mapper/
    disk_mapper_folder=$(ls /dev/mapper/)
    inform "Before partprobe, /dev/mapper/ folder content: ${disk_mapper_folder}."

    # probe partition
    probe_partition=$(/usr/sbin/partprobe $devPath 2> /dev/null)
    rc=$?
    inform "Manually run command partprobe on $devPath of wwid $wwid with return code: $rc"

    # ls /dev/disk/by-path
    disk_by_path_folder=$(ls /dev/disk/by-path/)
    inform "After partprobe, /dev/disk/by-path/ folder content: ${disk_by_path_folder}."
    # ls /dev/disk/by-id
    disk_by_id_folder=$(ls /dev/disk/by-id/)
    inform "After partprobe, /dev/disk/by-id/ folder content: ${disk_by_id_folder}."
    # ls /dev/mapper/
    disk_mapper_folder=$(ls /dev/mapper/)
    inform "After partprobe, /dev/mapper/ folder content: ${disk_mapper_folder}."
}

function refreshZIPL {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}
  # @Description:
  #   Retrieves initial information for the IPL from disk
  # @Parameters:
  #   devNode: the path to access the disk
  # @Returns:
  #   None
  local devNode=$1

  if [[ $skipzipl = 'YES'  ]]; then
    # this is the part of return info for upper layer(smtclient)
    inform "RESULT PATHS: $valid_paths_str"
    return
  fi

  inform "Begin to refreshZIPL."

  if [[ ! -e "$devNode" ]]; then
    # first, run partprobe to refresh partition table if multipath is enabled
    if [[ $multipath_enabled == 1 ]]; then
        inform "multipath is enabled, so probe partition on dev of wwid: $wwid"
        probePartition
    fi
    # retry, while waiting various durations
    inform "devNode file ${devNode} not exist yet. Retrying..."
    sleepTimes=".001 .01 .1 .5 1 2 3 5 8 15"

    for seconds in $sleepTimes; do
      sleep $seconds
      inform "Retrying with interval as ${seconds} seconds"
      if [[ -e "$devNode" ]]; then
        # successful - leave loop
        break
      fi
    done
    # print error log if retry fails
    if [[ ! -e "$devNode" ]]; then
      printError "devNode ${devNode} doesn't exist. Get fcps: ${fcps[*]} and wwpns: ${wwpns[*]}"
      printLogs
      exit 6
    fi
  fi

  # Create a mount dir.
  deviceMountPoint=$(/usr/bin/mktemp -d /mnt/XXXXX)
  rc=$?
  if [[ $rc -ne 0 ]]; then
    printError "Create mount dir fails, rc: $rc."
    exit 7
  fi

  # Register EXIT sigual for umount dir and disconnect fcp devices
  trap 'cleanup_umountdir_and_disconnect_fcp' EXIT

  # Try to mount fcp device.
  inform "devNode is: $devNode point: $deviceMountPoint"
  mount $devNode $deviceMountPoint
  rc=$?
  if [[ $rc -ne 0 ]]; then
    printError "Mount devNode fails. rc: $rc."
    exit 8
  fi
  mount -t proc /proc $deviceMountPoint/proc
  mount -o bind /sys $deviceMountPoint/sys
  # mount -o bind /run $deviceMountPoint/run
  mount -o bind /dev $deviceMountPoint/dev
  rc=$?
  if [[ $rc -ne 0 ]]; then
    printError "Mount bind fails. rc: $rc."
    exit 8
  fi

  # Get target os version
  local osRelease="$deviceMountPoint/etc/os-release"
  local slesRelease="$deviceMountPoint/etc/SuSE-release"
  local rhelRelease="$deviceMountPoint/etc/redhat-release"

  if [[ -e $osRelease ]]; then
    os=`cat $osRelease | grep "^ID=" | sed \
      -e 's/ID=//' \
      -e 's/"//g'`
    version=`cat $osRelease | grep "^VERSION_ID=" | sed \
      -e 's/VERSION_ID=//' \
      -e 's/"//g' \
      -e 's/\.//'`
    os=$os$version

  #The /etc/redhat-release file will be deprecated in rhel7 and later release
  elif [[ -e $rhelRelease ]]; then
    os='rhel'
    version=`cat $rhelRelease | grep -i "Red Hat Enterprise Linux Server" | sed \
      -e 's/[A-Za-z\/\.\(\)]//g' \
      -e 's/^ *//g' \
      -e 's/ *$//g' \
      -e 's/\s.*$//'`
    os=$os$version
  fi
  # Prepare the new rd.zfcp parameter value 
  # Due to the kernel command line length limitation of RHEL, we will limit the rd.zfcp
  # items count to 8. so if the valid paths count is greater than 8, we need to do truncation.
  # otherwise we can use the rd_zfcp string we get while finding the valid paths.
  if [[ $paths_count -gt 8 ]]; then
  	inform "valid paths count $paths_count is greater than 8, do truncation to get the rd.zfcp parameter."
  	truncaterdzfcp
  fi
  inform "Final rd.zfcp value is: $rd_zfcp."

  # Exec zipl command to prepare device for initial problem load
  if [[ $os == rhel7* ]]; then
    inform "Refresh $os zipl."
    zipl_conf='etc/zipl.conf'
    
    ### Delete all items start with "rd.zfcp="
    sed -ri 's/rd.zfcp=\S+\s*[[:space:]]//g' ${deviceMountPoint}/$zipl_conf
    
    # Remove quote
    sed -i 's/\"$//g' ${deviceMountPoint}/$zipl_conf
    
    # Remove quote
    sed -i 's/[ \t]*$//g' ${deviceMountPoint}/$zipl_conf
    
    # Append rd.zfcp= string to "parameters=" line.
    sed -i "/^[[:space:]]parameters=/ s/$/ $rd_zfcp/" ${deviceMountPoint}/$zipl_conf
    
    # Append quote to "parameters=" line
    sed -i "/^[[:space:]]parameters=/ s/$/\"/" ${deviceMountPoint}/$zipl_conf

  elif [[ $os == rhel8* ]]; then
    inform "Refresh $os zipl."
    kernel_version_conf_files=`find $deviceMountPoint/boot/loader/entries/ -name '*.conf'`
    wwid=`/usr/lib/udev/scsi_id --whitelisted $diskPath 2> /dev/null`
    rootPath="root=\/dev\/disk\/by-id\/dm-uuid-part1-mpath-$wwid "
    # The Volume may be contains several kernel version conf files.
    # So every conf file needs to be changed.
    for confFile in $kernel_version_conf_files; do
       # Delete all items start with "rd.zfcp="
       sed -ri 's/rd.zfcp=\S+\s*[[:space:]]//g' $confFile
       # Remove trailing space
       sed -i 's/[ \t]*$//g' $confFile
       # Update the root file system target path
       sed -ri "s/root=\S+\s*[[:space:]]/$rootPath /g" $confFile
       # Append rd.zfcp= string to "options root=" line.
       sed -i "/^options root=/ s/$/ $rd_zfcp/" $confFile
    done
  elif [[ $os == "" ]]; then
    inform "This is not the root disk, zipl will not be executed on it"
  else
    inform "The os version is: $os, this is not a supported linux distro"
  fi

  # Remove dirty data in /etc/fstab left by the previous vm deploy
  # remove lines containing "/mnt/ephemeral" or " swap swap "
  # TODO: need to update the implementation method when later the ephemeral
  # mount point maybe changed to user configurable, to not hardcode to /mnt/ephemeralxxx
  inform "Updating ${deviceMountPoint}/etc/fstab"
  sed -i '/\/mnt\/ephemeral/d' ${deviceMountPoint}/etc/fstab
  sed -i '/ swap swap /d' ${deviceMountPoint}/etc/fstab

  # Remove stale /etc/multipath/bindings and /etc/multipath/wwids
  # These files may contain the old info of the captured base vm,
  # which disrupts the volume bindings of the new vm deployed from above captured image, resulting
  #  a. mpath name inconsistent between 'df' and 'multipath'
  #  b. in some scenairo, boot-volume extend partition fail due to 'a'
  # By removing them, they can be recreated later with correct volume bindings
  # when multipathd start at vm boot time.
  inform "Move stale multipath bindings and wwids if any"
  if [[ -r "${deviceMountPoint}/etc/multipath/bindings" ]]; then
    mv ${deviceMountPoint}/etc/multipath/bindings ${deviceMountPoint}/etc/multipath/bindings.bak
  fi
  if [[ -r "${deviceMountPoint}/etc/multipath/wwids" ]]; then
    mv ${deviceMountPoint}/etc/multipath/wwids ${deviceMountPoint}/etc/multipath/wwids.bak
  fi

  # Refresh bootmap
  out=`chroot $deviceMountPoint /sbin/zipl 2>&1`
  rc=$?
  if [[ $rc -ne 0 ]]; then
    printError "Failed to execute zipl on $os due to $out."
    return 1
  fi
  # Sync to ensure cached date writen back to target disk
  blockdev --flushbufs $diskPath > /dev/null

  # Return valid paths
  inform "RESULT PATHS: $valid_paths_str"

  return
} #refreshZIPL

function refreshFCPBootmap {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}
  # @Description:
  #   Refresh bootmap info of FCP device.
  # @Code:

  local out
  local rc
  local errorFile

  fcpchannels=$(echo ${fcpchannel} | tr '[:upper:]' '[:lower:]')
  lun=$(echo ${lun} | tr '[:upper:]' '[:lower:]')
  wwpn=$(echo ${wwpn} | tr '[:upper:]' '[:lower:]')

  # Add 0x to lun
  lun=0x$lun

  # Split fcpchannels and wwpn by ","
  IFS=',' read -r -a fcps <<< "$fcpchannels"
  IFS=',' read -r -a ws <<< "$wwpn"

  # Check the count of FCP devices, if greater than 8, report error and exit.
  fcps_len=${#fcps[@]}
  if [ $fcps_len -gt 8 ]
  then
      printError "ERROR: The FCP channel count $fcps_len is greater than 8."
      exit 12
  fi

  enable_zfcp_mod=`lsmod | grep zfcp`
  if [ -z "$enable_zfcp_mod" ];then
      modprobe zfcp
  fi

  local zthinUserID=$(vmcp q userid | awk '{printf $1}')
  inform "zthinUserID is $zthinUserID"

  # Check whether multipath is enabled by checking the multipathd service
  checkMultipath

  # Register EXIT sigual for cleanup FCP devices.
  trap 'cleanup_fcpdevices' EXIT

  # Try to find which physical wwpns are being used.
  for fcp in "${fcps[@]}"
  do
    # Ignore fcp device firstly
    /sbin/cio_ignore -r $fcp > /dev/null

    # Convert the fcp device to upper case
    fcp_device=($(echo "$fcp"| tr 'a-z' 'A-Z'))

    # Execute the vmcp command, don't execute dedicate command
    # if the fcp device is already dedicate to the compute node,
    res=`vmcp q fcp | grep FCP| grep "$fcp_device"`

    # The fcp device doesn't dedicate to the compute node so
    # dedicate it to the compute node.
    if [[ -z $res ]]; then
      # Try to connect FCP device and online it.
      /opt/zthin/bin/smcli Image_Device_Dedicate -T $zthinUserID -v $fcp -r $fcp
      if [[ $? -ne 0 ]]; then
        printError "Dedicate fails, maybe other machines use this FCP: ${fcp}"
        exit 3
      fi
    fi

    chccwdevDevice $fcp "online"
    if [[ $? -ne 0 ]]; then
      # Online failed
      rc=4
    fi
    host=`lszfcp | grep "$fcp" | cut -d " " -f 2`
    # see if NPIV is enable or not
    NPIV=`cat /sys/bus/ccw/drivers/zfcp/0.0.$fcp/$host/fc_host/$host/port_type`
    AutoLunScan=`cat /sys/module/zfcp/parameters/allow_lun_scan`
    # If auto-discovery of LUNs is disabled on s390 platforms
    # luns need to be added to the configuration through
    # the unit_add interface
    if [[ "$AutoLunScan" != "Y" || "$NPIV" != "NPIV VPORT" ]]; then
      # the number WWPNs is generated dynamically
      # so we need to get them from the filesystem
      inform "allow_lun_scan is disabled, use unit_add to discovery luns"
      ActiveWWPNs=$(ls /sys/bus/ccw/drivers/zfcp/0.0.$fcp/ | grep 0x)
      inform "ActiveWWPNs: $ActiveWWPNs"
      for wwpn in ${ActiveWWPNs[@]}
      do
          echo "$lun" > /sys/bus/ccw/drivers/zfcp/0.0.$fcp/$wwpn/unit_add
      done
    else
      inform "scan the scsi host to discovery luns"
      echo "- - -" > /sys/class/scsi_host/$host/scan
    fi
    # Use sleep command to make sure all files are generated
    # by chccwdev command.
    sleep 1
  done

  # Read and parse "lsluns" output then check command input.
  # If command inputs, merge "lsluns" output and command input
  # If not, use "lsluns" parse output directly.
  wwpns=()
  wwpn=$(lsluns |grep -E 'at port' | awk -F 'at port' '{print $2}' | sed -e 's/^[ ]*//g' | sed -e 's/\:$//g' | tr ' ' '\n' | sort -u | sed -e 's/[\t]//g' |  tr '\n' ' ')
  IFS=' ' read -r -a lsluns_wwpns <<< "$wwpn"
  if [[ ${ws[*]} ]]; then
    for w in "${lsluns_wwpns[@]}"
    do
      w=${w##*0x}
      if [[ "${ws[@]}" =~ "$w" ]]; then
        wwpns+=($w)
      fi
    done
  else
    for i in "${!lsluns_wwpns[@]}"
    do
      x=${lsluns_wwpns[i]##*0x}
      wwpns[$i]=$x
    done
  fi

  # Remove duplicates
  wwpns=($(echo "${wwpns[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
  if [[ ! $wwpns[0] ]]; then
    printError "No available WWPN found."
    lsluns_output=$(lsluns 2>&1)
    inform "lsluns output: ${lsluns_output}."
    exit 9
  fi
  inform "These WWPNs will be operated: ${wwpns[*]}"

  # Check the count of WWPN, if greater than 8, warning and don't exit.
  wwpns_len=${#wwpns[@]}
  if [ $wwpns_len -gt 8 ]
  then
      inform "WARNING: The count of WWPN can't greater than 8."
  fi

  # check and record all the valid path (combinations of FCP and WWPN)
  # the paths_dict will be in the format: (["FCP1"]="W1 W2" ["FCP2"]="W3 W4")
  declare -A paths_dict
  paths_count=0
  rd_zfcp=""
  # the first_fcp and first_wwpn will be used in single path scenario (multipathd service not running)
  first_fcp=""
  first_wwpn=""
  for fcp in "${fcps[@]}"
  do
    for wwpn in "${wwpns[@]}"
      do
        x="/dev/disk/by-path/ccw-0.0.${fcp}-zfcp-0x${wwpn}:${lun}"
        if [[ -e $x ]];then
          if [[ -z $diskPath ]]; then
            # set diskPath to the first found valid path
            # this diskPath will only be used to access volume when multipathd service
            # is not started. Otherwise it will normally be used to find the multipath disk.
            diskPath=$x
            first_fcp=$fcp
            first_wwpn=$wwpn
          fi
          inform "found valid path: $x."
          # add the paths to the dict
          if [[ -z ${paths_dict["$fcp"]} ]]; then
             paths_dict+=([$fcp]="$wwpn")
          else
             old_value=${paths_dict["$fcp"]}
             new_value=${old_value}" "$wwpn
             paths_dict[$fcp]=$new_value
          fi
          # increase paths_count
          ((paths_count=$paths_count+1))
          # add this (fcp, wwpn) combinations into the rd_zfcp string which will be used to
          # set the kernel command line in zipl.conf to refresh zipl
          rd_zfcp+="rd.zfcp=0.0."$fcp,0x$wwpn,$lun" "
        fi
      done
  done

  # check whether there is valid paths found
  if [[ -z $diskPath ]]; then
    printError "No valid paths found for FCP devices: ${fcps[*]} and wwpns: ${wwpns[*]}"
    printLogs
    exit 10
  fi

  # get the valid paths string to return to upper layer
  # format: "FCP1:W1 W2,FCP2:W3 W4"
  # print the valid path count and details
  inform "$paths_count valid paths found."
  valid_paths_str=""
  for fcp in $(echo ${!paths_dict[*]})
  do
	wwpns=${paths_dict[$fcp]}
	if [[ -z $valid_paths_str ]]; then
	    valid_paths_str=$fcp":"$wwpns
    else
        valid_paths_str+=","$fcp":"$wwpns
    fi
  done
  # sample:
  # valid paths string is: 1a1b:500507680b21bac6 500507680b21bac7 500507680b22bac6 500507680b22bac7,
  # 1b1b:500507680b21bac6 500507680b21bac7 500507680b22bac6 500507680b22bac7
  inform "valid paths string is: $valid_paths_str."

  # Set devNode according to whether multipath is enabled on the compute node
  wwid=""
  if [[ $multipath_enabled == 1 ]]; then
      wwid=`/usr/lib/udev/scsi_id --whitelisted $diskPath 2> /dev/null`
      devNode="/dev/disk/by-id/dm-uuid-part1-mpath-$wwid"
      inform "Multipath is enabled, using multipath devNode: $devNode."
  else
      # use the first fcp and wwpn found in valid paths
      devNode="/dev/disk/by-path/ccw-0.0.${first_fcp}-zfcp-0x${first_wwpn}:${lun}-part1"
      # For blockdev command use.
      inform "Multipath is not enabled, using single path devNode: $devNode."
  fi
  
  refreshZIPL $devNode
} #refreshFCPBootmap

function refreshBootMap {
  : SOURCE: ${BASH_SOURCE}
  : STACK:  ${FUNCNAME[@]}
  # @Description:
  #   Refresh the bootmap of disk image.
  # @Code:

  if [[ $format = 'FCP' ]]; then
    refreshFCPBootmap
  elif [[ $format = 'FBA' ]]; then
    :
  else
    printError "Device type not recognised."
    exit 11
  fi 
} #refreshBootMap


###############################################################################
### START EXECUTION ###########################################################
###############################################################################

parseArgs $@
checkSanity
refreshBootMap

###############################################################################
### END OF SCRIPT #############################################################
###############################################################################
