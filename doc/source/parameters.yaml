auth_token:
  description: |
    The token returned to client if authorized.
  in: header
  required: true
  type: string
ret_rs:
  description: |
    The reason code for API request.
  in: body
  required: true
  type: integer
ret_overallrc:
  description: |
    The overall return code for API request.
  in: body
  required: true
  type: integer
ret_rc:
  description: |
    The return code for API request.
  in: body
  required: true
  type: integer
ret_errmsg:
  description: |
    The error message returned for API request. It can be empty
    if no error occur.
  in: body
  required: true
  type: string
ret_modID:
  description: |
    The module ID that causes the error to occur.
  in: body
  required: true
  type: integer
ret_output:
  description: |
    The return data from API request.
  in: body
  required: true
  type: dict
min_version_sdk:
  description: |
    Min version of Feilong. 
  in: header
  required: true
  type: string
max_version_sdk:
  description: |
    Max version of Feilong.
  in: header
  required: true
  type: string
api_version_sdk:
  description: |
    API version of Feilong.
  in: header
  required: true
  type: string
version_sdk:
  description: |
    Version of Feilong.
  in: header
  required: true
  type: string
token_admin:
  description: |
    Admin-token, which is stored in /etc/zvmsdk/token.dat. 
    You need put this into header to request for a auth-token.
    Then you can send a request with this auth-token.
  in: header
  required: true
  type: string
userid_create:
  description: |
    The userid of the guest to be created
  in: body
  required: true
  type: string
guest_list:
  description: |
    Guests list
  in: body
  required: true
  type: list
guest_dict:
  description: |
    Guest dict
  in: body
  required: true
  type: dict
guest_userid:
  description: |
    Guest userid
  in: path
  required: true
  type: string
guest_vcpus:
  description: |
    vcpus count.
  in: body
  required: true
  type: integer
guest_memory:
  description: |
    Memory size of the guest, in MBytes.
  in: body
  required: true
  type: integer
guest_memory_kb:
  description: |
    Meemory size used by the guest, in KBytes.
  in: body
  required: true
  type: integer
guest_memory_kb_max:
  description: |
    The maximum memory in KBytes can be allocated for this guest.
  in: body
  required: true
  type: integer
guest_vnics:
  description: |
    vNICs statistics of one guest.
  in: body
  required: true
  type: dict
guest_info:
  description: |
    Status of guest.
  in: body
  required: true
  type: dict
user_profile_guest:
  description: |
    Profile of guest.
  in: body
  required: false
  type: string
user_direct_guest:
  description: |
    Dictionary describing user direct and check info result
  in: body
  required: true
  type: dict
disk_list_guest:
  description: |
    A list of disks info for the guest
    It has one dictionary that contain some of the below keys for
    each disk, the root disk should be the first element in the
    list.
  in: body
  required: false
  type: list
add_mdisk_disk_vdev:
  description: |
    when adding mdisk (either add after create or during create guest)
    use this param to specify the virtual device number.
    e.g. add this param to dist list as `vdev: 0123` will result user
    direct has something like `MDISK 0123`
  in: body
  required: false
  type: string
guest_ipl_from:
  description: |
    where the guest IPL from, by default it's ipl from
    `CONF.zvm.user_root_vdev`, and if this value is not empty,
    the IPL will from given param, for example `IPL CMS` will IPL
    from CMS instead of device number.
  in: body
  required: false
  type: string
guest_ipl_param:
  description: |
    The param to add to IPL command, e.g. `IPL xxx PARM <guest_ipl_param>`
  in: body
  required: false
  type: string
guest_ipl_loadparam:
  description: |
    The loadparam to add to IPL command, e.g. `IPL xxx LOADPARM <guest_ipl_loadparam>`
  in: body
  required: false
  type: string

guest_dedicate_vdevs:
  description: |
    A list of device vdevs to dedicate to the guestã€‚
  in: body
  required: false
  type: list

guest_loaddev:
  description: |
    The loaddev parms to add in the guest directory.Current supported key includes 'portname'
    and 'lun'. Both the 'portname' and 'lun' can specify only one one- to
    eight-byte hexadecimal value in the range of 0-FFFFFFFFFFFFFFFF.
  in: body
  required: false
  type: dict

guest_max_cpu:
  description: |
    The maximum number of virtual cpus this user can define.
    The value should be a decimal value between 1 and 64.
  in: body
  required: false
  type: integer
guest_max_mem:
  description: |
    The maximum size of memory the user can define.
    The value should be specified by 1-4 bits of number suffixed by
    either M (Megabytes) or G (Gigabytes). And the number should be
    a whole number, eg. 512M, 4G.
  in: body
  required: false
  type: string
additional_disk_guest:
  description: |
    A list of additional disks info for the guest
    It has one dictionary that contain some of the below keys for
    each disk
  in: body
  required: true
  type: list
size_disk:
  description: |
    size of disk, case insensitive, the unit can be in Megabytes (M),
    Gigabytes (G), or number of cylinders/blocks, for example, please
    use ``512M``, ``1g`` or just ``2000``.
  in: body
  required: true
  type: string
format_disk:
  description: |
    Format of disk, can be ``ext2``, ``ext3``, ``ext4``, ``swap``, ``xfs``, ``none``.
    The file system ``none`` means there is no need to create a file system,
    and in turn no format and partition table will be created, this usually
    used for some system such as z/OS.
  in: body
  required: false
  type: string
is_boot_disk:
  description: |
    is boot disk or not. For the root disk, this key must be set to
    indicate the image that will be deployed on this disk.
  in: body
  required: false
  type: bool
disk_pool_guest:
  description: |
    disk pool, if not specified, the disk will be created by using
    the value from configure file, the format is
    ``ECKD:eckdpoolname`` or ``FBA:fbapoolname``.
  in: body
  required: false
  type: string
disk_info:
  description: |
    A dict to describe disk info.
  in: body
  required: true
  type: dict
vdev_info:
  description: |
    A dict to describe vdev list to be deleted.
  in: body
  required: true
  type: dict
disk_vdev_list:
  description: |
    Disk vdev list of guest
    It has one list contains the vdev for delete,
    for example, ``['0101','0102']``
  in: body
  required: true
  type: list
disk_vdev:
  description: |
    The device number of the disk, if not specified, zvmsdk will use the next vdev
    of CONF.zvm.user_root_vdev as the additional disk's vdev, eg. if CONF.zvm.user_root_vdev
    is 0100, zvmsdk will use 0101 as the vdev for first additional disk in disk_info, 0102 as
    the second additional disk's vdev
  in: body
  required: false
  type: string
disk_mountpoint:
  description: |
    The directory on guest to which the additional disk will be mounted, if not specified,
    zvmsdk will use /mnt/ephemeral0 as the mount point of first additional disk, /mnt/ephemeral1
    as the mount point of second additional disk
  in: body
  required: false
  type: string
format_disk_required:
  description: |
    Format of disk, can be ``ext2``, ``ext3``, ``ext4``, ``swap``, ``xfs``.
    The file system ``none`` means there is no need to create a file system,
    and in turn no format and partition table will be created, this usually
    used for some system such as z/OS.
  in: body
  required: true
  type: string
userid_list_guest:
  description: |
      A string that contains single userid or userids delimited by comma, like ``id1, id2, id3``
  in: path
  required: true
  type: string
stats_guest:
  description: |
    cpu and memory statics of guest
  in: body
  required: true
  type: dict
power_status_guest:
  description: |
    Power status of guest, can be either ``on`` or ``off``.
  in: body
  required: true
  type: string
cpu_time_us_guest:
  description: |
    The CPU time used in microseconds.
  in: body
  required: true
  type: integer
num_cpu_guest:
  description: |
    The count of virtual CPUs for the guest.
  in: body
  required: true
  type: integer
action_start_guest:
  description: |
    Take ``start`` action on guest.
  in: body
  required: true
  type: string
action_stop_guest:
  description: |
    Take ``stop`` action on guest.
  in: body
  required: true
  type: string
action_softstop_guest:
  description: |
    Take ``softstop`` action on guest.
  in: body
  required: true
  type: string
action_pause_guest:
  description: |
    Take ``pause`` action on guest.
  in: body
  required: true
  type: string
action_unpause_guest:
  description: |
    Take ``unpause`` action on guest.
  in: body
  required: true
  type: string
action_reboot_guest:
  description: |
    Take ``reboot`` action on guest.
  in: body
  required: true
  type: string
action_reset_guest:
  description: |
    Take ``reset`` action on guest.
  in: body
  required: true
  type: string
action_deploy_guest:
  description: |
    Take ``deploy`` action on guest.
  in: body
  required: true
  type: string
action_capture_guest:
  description: |
    Take ``capture`` action on guest.
  in: body
  required: true
  type: string
action_grow_root_volume_guest:
  description: |
    Take ``grow_root_volume`` action on guest.
  in: body
  required: true
  type: string
action_get_console_guest:
  description: |
    Take ``get_console_output`` action on guest.
  in: body
  required: true
  type: string
action_live_migrate_guest:
  description: |
    Take ``live_migrate_vm`` action on guest.
  in: body
  required: true
  type: string
dest_zcc_userid:
  description: |
     The userid of zcc on destination node.
     Required if ``lgr_action`` equals ``move``.
  in: body
  required: false
  type: string
lgr_destination:
  description: |
     The system ID of the z/VM system to which
     the specified vm will be relocated or tested.
  in: body
  required: true
  type: string
lgr_parms:
  description: |
     A dictionary of options for relocation.
  in: body
  required: false
  type: dict
lgr_action:
  description: |
     Indicates the action is ``test`` or ``move`` for the live migration.
     ``test`` will test the guest is eligible to live migrate or not.
     ``move`` will live migrate the guest immediately.
  in: body
  required: true
  type: string
action_register_guest:
  description: |
    Take ``register_vm`` action on guest.
  in: body
  required: true
  type: string
guest_register_meta:
  description: |
    The metadata of the vm to be registered.
  in: body
  required: true
  type: string
guest_register_net_set:
  description: |
    Guest network configured or not.
    ``1`` means configured, ``0`` means not configured. Default as ``1``.
  in: body
  required: true
  type: string
guest_register_port_macs:
  description: |
    The dict of virtual interface port id and mac id
  in: body
  required: false
  type: dict
action_deregister_guest:
  description: |
    Take ``deregister_vm`` action on guest.
  in: body
  required: true
  type: string
action_live_resize_cpus_of_guest:
  description: |
    Take ``live_resize_cpus`` action on guest.
  in: body
  required: true
  type: string
action_resize_cpus_of_guest:
  description: |
    Take ``resize_cpus`` action on guest.
  in: body
  required: true
  type: string
cpu_cnt:
  description: |
    The number of virtual cpus that the guest should
    have after resize. The value should be an
    positive integer between 1 and 64.
  in: body
  required: true
  type: integer
action_live_resize_mem_of_guest:
  description: |
    Take ``live_resize_mem`` action on guest.
  in: body
  required: true
  type: string
action_resize_mem_of_guest:
  description: |
    Take ``resize_mem`` action on guest.
  in: body
  required: true
  type: string
mem_size:
  description: |
    The size of memory that the guest should have after resize.
    The value should be specified by 1-4 bits of number suffixed by
    either M (Megabytes) or G (Gigabytes). And the number should be
    an integer, eg. 512M, 4G.
  in: body
  required: true
  type: string
vdev_guest:
  description: |
    nic device number, 1- to 4- hexadecimal digits.
  in: path
  required: true
  type: string
host_info:
  description: |
    The dict of host information.
  in: body
  required: true
  type: dict
disk_pool:
  description: |
    The pool name to get pool information from
  in: path
  required: false
  type: string
disk_info_total:
  description: |
    The total size of the pool in Gigabytes (G).
  in: body
  required: true
  type: int
disk_info_available:
  description: |
    The total available size of the disks in the pool in Gigabytes(G).
  in: body
  required: true
  type: int
disk_info_used:
  description: |
    The size of used disks in the pool in Gigabytes(G).
  in: body
  required: true
  type: int
image_info:
  description: |
    The image info for specific image or all images, each image has one dict
    to indicate its info
  in: body
  required: true
  type: list
image_dict:
  description: |
    The image info dict.
  in: body
  required: true
  type: dict
image_name:
  description: |
    Image name that can be uniquely identify an image.
  in: body
  required: true
  type: string
image_name_path:
  description: |
    Image name that can be uniquely identify an image.
  in: path
  required: true
  type: string
image_md5sum:
  description: |
    md5sum for the specific image.
  in: body
  required: true
  type: string
image_import_url:
  description: |
    The location of the image to be imported, support import image from 3
    types location, local file system: eg. ``file:///opt/images/import.img``.
    http server: eg. ``http://192.168.2.1/path/to/import.img``
    file system on remote host: in this case both url and remote_host parameter
    should be specified
  in: body
  required: true
  type: string
image_export_location:
  description: |
    The dictionary to indicate the location info of image to be exported
  in: body
  required: true
  type: dict
image_export_url:
  description: |
    The location of the exported image, support export to 2 types location,
    local file system: eg. ``file:///opt/images/export.img``
    file system on remote host: in this case both dest_url and remote_host
    parameter should be specified
  in: body
  required: true
  type: string
image_metadata:
  description: |
    The metadata which describes image, the valid keys are os_version, md5sum and disk_type,
    os_version is required key, the valid os_version values are: rhel6.x, rhel7.x,
    sles11.x, sles12.x, ubuntu16.x, rhcos4.X, all case insensitive, please contact with your cloud administrator
    if you don't know the image's os version. disk_type is required if os_version is rhcos4,
    the valid disk_type values are: DASD, SCSI.
  in: body
  required: true
  type: dict
remotehost_image_import:
  description: |
    The server from where the image will be import, if remote_host is None,
    the image will be import from the url in local server, otherwise,
    the format is username@ip, for example, ``nova@9.x.x.x`` or
    username@hostname, for example, ``test@test.ibm.com``
  in: body
  required: false
  type: string
remotehost_image_export:
  description: |
    The server that the image will be export to, if remote_host is None,
    the image will be stored in the dest_path in local server, otherwise,
    the format is username@ip, for example, ``nova@9.x.x.x`` or
    username@hostname eg.``test@test.ibm.com``.
  in: body
  required: false
  type: string
root_disk_size_image:
  description: |
    The image's root disk size in units CYL or BLK, eg 3338:CYL or 614200:BLK.
  in: body
  required: true
  type: string
physical_disk_size_image:
  description: |
    Physical image size in bytes eg 5120000
  in: body
  required: true
  type: string
image_type:
  description: |
    How the image is generated, if it captured from root disk the type is netboot.
  in: body
  required: true
  type: string
image_comments:
  description: |
    the comments for the image
  in: body
  required: true
  type: string
export_image_dict:
  description: |
    The dict contains image info after export.
  in: body
  required: true
  type: dict
transportfiles:
  description: |
    The files path that used to customize the vm. For RHCOS image, the transportfiles
    should be the ignition file.
  in: body
  required: false
  type: string
remotehost_transportfiles:
  description: |
    The server that the transportfiles located, if remotehost is not
    specified, will deploy with the transport file in local server,
    otherwise, the format is username@ip, for example, ``nova@9.x.x.x``
    or username@hostname eg.``test@test.ibm.com``
  in: body
  required: false
  type: string
deploy_vdev:
  description: |
    Device number to which the image will be deployed, 1- to 4- hexadecimal 
    digits. ``null`` is also allowed.
  in: body
  required: false
  type: string
deploy_hostname:
  description: |
    hostname of the guest. Will be ignored if ``transportfiles`` 
    specified. ``null`` is also allowed.
  in: body
  required: false
  type: string
deploy_skipdiskcopy:
  description: |
    whether to skip the copy of image to disk. Default value if False.
    If the value is True, the ``image_name`` specified should be the os version.
    If the value is False, the ``image_name`` specified should be the name of the image
    to be used to copy to the root disk.
  in: body
  required: false
  type: boolean
capture_type:
  description: |
    The type of capture\:

    - ``rootonly``: indicate just root device will be captured, this is the default one
    - ``alldisks``: indicate all the devices of the userid will be captured
  in: body 
  required: false
  type: string
compress_level:
  description: |
    The compression level of the image, default value is 6
  in: body 
  required: false
  type: integer
vswitch_name:
  description: |
    vswitch name.
  in: path
  required: true
  type: string
vswitch_name_body:
  description: |
    vswitch name.
  in: body
  required: true
  type: string
rdev_vswitch:
  description: |
    The real device number, a maximum of three devices. ``null`` is also allowed.
  in: body
  required: false
  type: string
controller_vswitch:
  description: |
    The vswitch's controller. It could be userid or "*" to
    specifies any available controller.
  in: body
  required: false
  type: string
connection_vswitch:
  description: |
    Connection type option \:

    - ``CONnect``: Activate the real device connection.
    - ``DISCONnect``: Do not active the real device connection.
    - ``NOUPLINK``: the vswitch will never have connectivity through.
  in: body
  required: false
  type: string
network_type_vswitch:
  description: |
    Specifies the transport mechanism to be used for switch,
    as follow:IP, ETHERNET, default is ETHERNET.
  in: body
  required: false
  type: string
router_vswitch:
  description: |
    Connection type option \:

    - ``NONROUTER``: The OSA-Express device identified in
      real_device_address= will not act as a router to the vswitch.
    - ``PRIROUTER``: The OSA-Express device identified in
      real_device_address= will act as a primary router to the vswitch.
    - ``Note``: If the network_type is ETHERNET, this value must be
      unspecified, otherwise, if this value is unspecified,
      default is NONROUTER
  in: body
  required: false
  type: string
vid_vswitch:
  description: |
    The VLAN ID. This can be any of the following values:
    ``UNAWARE``,  ``AWARE`` or ``1-4094``.
  in: body
  required: false
  type: string, integer
port_type_vswitch:
  description: |
    Port type \:

    - ``ACCESS``: The default porttype attribute for
      guests authorized for the virtual switch.
      The guest is unaware of VLAN IDs and sends and
      receives only untagged traffic
    - ``TRUNK``: The default porttype attribute for
      guests authorized for the virtual switch.
      The guest is VLAN aware and sends and receives tagged
      traffic for those VLANs to which the guest is authorized.
      If the guest is also authorized to the natvid, untagged
      traffic sent or received by the guest is associated with
      the native VLAN ID (natvid) of the virtual switch.
  in: body
  required: false
  type: string
gvrp_vswitch:
  description: |
    gvrp \:

    - ``GVRP``: Indicates that the VLAN IDs in use on the virtual
      switch should be registered with GVRP-aware switches on the
      LAN. This provides dynamic VLAN registration and VLAN
      registration removal for networking switches. This
      eliminates the need to manually configure the individual
      port VLAN assignments.
    - ``NOGVRP``: Do not register VLAN IDs with GVRP-aware switches on
      the LAN. When NOGVRP is specified VLAN port assignments
      must be configured manually
  in: body
  required: false
  type: string
queue_mem_vswitch:
  description: |
    A number between 1 and 8, specifying the QDIO
    buffer size in megabytes
  in: body
  required: false
  type: integer
native_vid_vswitch:
  description: |
    The native vlan id, 1-4094 or ``null``.
  in: body
  required: false
  type: integer
persist_option_vswitch:
  description: |
    Whether create the vswitch in the permanent
    configuration for the system.
  in: body
  required: false
  type: boolean
vswitch_list:
  description: |
    List of vswitches.
  in: body
  required: true
  type: list
imagename:
  description: |
    Retrieve the specified image information, if not specified,
    when list image, all images information will be returned.
  in: path
  required: false
  type: string
guest_userid_opt:
  description: |
    Guest userid.
  in: path
  required: False
  type: string
nic_id_opt:
  description: |
    nic identifier.
  in: path
  required: False
  type: string
vswitch_name_opt:
  description: |
    vswitch name.
  in: path
  required: False
  type: string
guests_nic_info:
  description: |
    List describing nic information, each nic has one dict
    to indicate its info, including userid, interface,
    switch, port id and comments.
  in: body
  required: true
  type: list
nic_set_info:
  description: |
    The information which is used to set nic device number
  in: body
  required: true
  type: dict
vdev_number:
  description: |
    nic device number, 1- to 4- hexadecimal digits.
  in: body
  required: false
  type: string
vdev_number_orNone:
  description: |
    nic device number, 1- to 4- hexadecimal digits. ``null`` is also allowed.
  in: body
  required: false
  type: string
nic_identifier:
  description: |
    nic identifier
  in: body
  required: false
  type: string
mac_address:
  description: |
    Mac address, it is only used when changing the guest's user direct.
    Format should be xx:xx:xx:xx:xx:xx, and x is a hexadecimal digit.
  in: body
  required: false
  type: string
ip_address:
  description: |
    ip address.
  in: body
  required: false
  type: string
active_flag:
  description: |
    Whether the change will apply to the active guest.
  in: body
  required: false
  type: bool
couple_info:
  description: |
    The info used to describe the couple/uncouple action.
  in: body
  required: true
  type: dict
couple_action:
  description: |
    couple or uncouple action.
  in: body
  required: true
  type: bool
vswitch_name_body_opt:
  description: |
    vswitch name.
  in: body
  required: false
  type: string
network_interface_info:
  description: |
    The information which is used to describe network interface.
  in: body
  required: true
  type: dict
guest_os_version:
  description: |
    Operating system version, the valid os_version values are: rhel6.x, rhel7.x,
    sles11.x, sles12.x, ubuntu16.x, all case insensitive, please contact with your
    cloud administrator if you don't know the guest's os version
  in: body
  required: true
  type: string
guest_os_version_all:
  description: |
    Operating system version, the valid os_version values are: rhel6.x, rhel7.x,
    sles11.x, sles12.x, ubuntu16.x, rhcos4.x, all case insensitive, please contact with your
    cloud administrator if you don't know the guest's os version
  in: body
  required: true
  type: string
guest_networks_list:
  description: |
    Network info list of guest. It has one dictionary that contain some of the below
    keys for each interface. All the keys are optional \:

    - ``ip_addr``: the IP address of the interface, ``cidr`` is required if ip address
      is set
    - ``dns_addr``: dns addresses list
    - ``gateway_addr``: gateway address
    - ``cidr``: cidr format
    - ``nic_vdev``: nic device number, 1- to 4- hexadecimal digits
    - ``mac_addr``: mac address
    - ``nic_id``: nic identifier
    - ``osa_device``: OSA device number, 1- to 4- hexadecimal digits
  in: body
  required: true
  type: list
vswitch_info:
  description: |
    The vswitch update info.
  in: body
  required: true
  type: dict
user_vlan_id:
  description: |
    A dict to describe guest userid and vlanid.
  in: body
  required: true
  type: dict
vlan_id:
  description: |
    The VLAN ID. This can be any of the value between -1 or 1-4094.
  in: body
  required: true
  type: integer
nic_comments:
  description: |
    the comments for the nic.
  in: body
  required: true
  type: string
nic_port:
  description: |
    nic identyifier.
  in: body
  required: true
  type: string
nic_userid:
  description: |
    the userid of the nic.
  in: body
  required: true
  type: string
nic_interface:
  description: |
    the device number of the nic.
  in: body
  required: true
  type: string
vswitch_details:
  description: |
    The vswitch info for specific vswitch
  in: body
  required: true
  type: dict
file_import:
  description: |
    The binary data for the file to be imported
  in: body
  required: true
  type: octet stream
file_request_header:
  description: |
    The media type descriptor for the request body. Use 'application/octet-stream'
  in: header
  required: true
  type: string
file_import_output:
  description: |
    Dictionary describing the file import status and result
  in: body
  required: true
  type: dict
file_import_dest_url:
  description: |
    The location of file after imported on Feilong. For example,
    'file:///var/lib/zvmsdk/files/imported/be919b98-8408-11e8-b9fe-020001000053'
  in: body
  required: true
  type: string
imported_file_size:
  description: |
    The physical file size in bytes
  in: body
  required: true
  type: int
file_md5sum:
  description: |
    The md5sum of the file after imported
  in: body
  required: true
  type: string
export_source_file:
  description: |
    The path of the file to be exported, eg. '/root/testfile'
  in: body
  required: true
  type: string
volume_info:
  description: |
    A dict to describe connection info of the volume
  in: body
  required: true
  type: dict
volume_conn:
  description: |
    A dict to describe info of the volume to be operated
  in: body
  required: true
  type: dict
volume_fcp:
  description: |
    FCP Device number, for example ``1fc5``
  in: body
  required: true
  type: string
volume_wwpn:
  description: |
    World Wide Port Number, must be start with ``0x``, for example ``0x50050763050b073d``
  in: body
  required: true
  type: string
volume_lun:
  description: |
    Logical Unit Number, must be start with ``0x``, for example ``0x4020400100000000``
  in: body
  required: true
  type: string
guest_multipath:
  description: |
    Multipath service is open or not
  in: body
  required: true
  type: bool
mount_point:
  description: |
    The symbol link name of the volume device. If not assigned, will be assigned by the os in vm.
  in: body
  required: false
  type: string
root_volume:
  description: |
    Volume is bootable or not
  in: body
  required: false
  type: bool
disk_list_output:
  description: |
    A list of created disks info for the guest
    It has one dictionary that contain some of the below keys for
    each disk.
  in: body
  required: true
  type: list
vdev_disk:
  description: |
    Device number of the disk, 1- to 4- hexadecimal digits.
  in: body
  required: true
  type: string
disk_pool_output:
  description: |
    disk pool, the format is ``ECKD:eckdpoolname`` or ``FBA:fbapoolname``.
  in: body
  required: true
  type: string
size_output:
  description: |
    size of disk, case insensitive, the unit can be in Megabytes (M),
    Gigabytes (G), for example, please ``512M``, ``1g``.
  in: body
  required: true
  type: string
last_access_time:
  description: |
    the time stamp of last access time of this image
    the seconds count after 1970 and is generated from python ``time`` module.
  in: body
  required: true
  type: float
fcp_list:
  description: |
    FCP devices list.
  in: body
  required: true
  type: string
wwpn_list:
  description: |
    World Wide Port Name IDs.
  in: body
  required: true
  type: string
lun:
  description: |
    Logical Unit Number ID
  in: body
  required: true
  type: string
adapters_info_output:
  description: |
    A list of adapters info for the guest
    It has one or more dictionary that contain some of the below keys, one dictionary represent for one adapter.
    each adapter.
  in: body
  required: true
  type: list
adapter_status:
  description: |
    status of adapter, 2 hexadecimal digits. ``02`` means normal.
  in: body
  required: true
  type: string
ip_version:
  description: |
    version of IP address, ``4`` means IPV4, ``6`` means IPV6.
  in: body
  required: true
  type: string
skipzipl:
  description: |
    whether or not to skip the step of refresh bootmap. If true, only return the valid wwpn list.
    Default value is False.
  in: body
  required: false
  type: bool
fcp_reserve:
  description: |
    If or not reserve the FCP devices.
  in: body
  required: true
  type: boolean
