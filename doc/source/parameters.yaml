auth_token:
  description: |
    The token returned to client if authorized.
  in: header
  required: true
  type: string
ret_rs:
  description: |
    The reason code for API request.
  in: body
  required: true
  type: integer
ret_overallrc:
  description: |
    The overall return code for API request.
  in: body
  required: true
  type: integer
ret_rc:
  description: |
    The return code for API request.
  in: body
  required: true
  type: integer
ret_errmsg:
  description: |
    The error message returned for API request. It can be empty
    if no error occurred.
  in: body
  required: true
  type: string
ret_modID:
  description: |
    The module ID that caused the error to occur.
  in: body
  required: true
  type: integer
ret_output:
  description: |
    The return data from API request.
  in: body
  required: true
  type: dict
min_version_sdk:
  description: |
    Minimum version of Feilong.
  in: header
  required: true
  type: string
max_version_sdk:
  description: |
    Maximum version of Feilong.
  in: header
  required: true
  type: string
api_version_sdk:
  description: |
    API version of Feilong.
  in: header
  required: true
  type: string
version_sdk:
  description: |
    Version of Feilong.
  in: header
  required: true
  type: string
token_admin:
  description: |
    Admin token, stored in ``/etc/zvmsdk/token.dat``.
    You need to put this into the header to request for an authentication token.
    Then you can send a request with this authentication token.
  in: header
  required: true
  type: string
userid_create:
  description: |
    The userid of the guest to be created.
  in: body
  required: true
  type: string
assigner_id:
  description: |
    The userid of the guest that the volume will be attached to or detached from.
  in: body
  required: true
  type: string
get_raw_data:
  description: |
    Whether to get raw FCP usage data from backend or not.
  in: parameter
  required: false
  type: boolean
get_statistics_data:
  description: |
    Whether to get statistics FCP usage data from backend.
  in: parameter
  required: false
  type: boolean
sync_with_zvm:
  description: |
    Whether to sync status of FCP devices with z/VM or not.
  in: parameter
  required: false
  type: boolean
smapi_health_report:
  description: |
    SMAPI health report.
  in: body
  required: true
  type: dict
guest_list:
  description: |
    Guests list.
  in: body
  required: true
  type: list
guest_dict:
  description: |
    Guest dict.
  in: body
  required: true
  type: dict
guest_userid:
  description: |
    Guest userid.
  in: path
  required: true
  type: string
guest_vcpus:
  description: |
    vCPUs count.
  in: body
  required: true
  type: integer
guest_memory:
  description: |
    Memory size of the guest, in MBytes.
  in: body
  required: true
  type: integer
guest_memory_kb:
  description: |
    Memory size used by the guest, in kilobytes.
  in: body
  required: true
  type: integer
guest_memory_kb_max:
  description: |
    The maximum memory in kilobytes that can be allocated for this guest.
  in: body
  required: true
  type: integer
guest_vnics:
  description: |
    vNIC statistics of guests, as a dictionary where the key is
    the userid and the value is a list of vNIC statistics.
  in: body
  required: true
  type: dict
guest_info:
  description: |
    Status of guest.
  in: body
  required: true
  type: dict
guest_account:
  description: |
    Account of guest, useful for guest billing.
  in: body
  required: false
  type: string
guest_comment_list:
  description: |
    Comment of the user directory.
  in: body
  required: false
  type: list
user_profile_guest:
  description: |
    Profile of guest, ``null`` is also allowed.
  in: body
  required: false
  type: string
user_direct_guest:
  description: |
    Dictionary with only one entry describing user directory.
  in: body
  required: true
  type: dict
disk_list_guest:
  description: |
    A list of disk information for the guest.
    It has one dictionary that contain some of the below keys for
    each disk. The root disk should be the first element in the
    list.
  in: body
  required: false
  type: list
minidisks_guest:
  description: |
    A list of disks information for the guest.
    Each entry in this list describes a minidisk and is a dictionary
    that contains some of the below keys.
  in: body
  required: false
  type: list
add_mdisk_disk_vdev:
  description: |
    When adding a minidisk (either after creating or during creation of guest),
    use this parameter to specify the virtual device number.
    e.g. adding this parameter to disk list as ``vdev: 0123`` will make user
    directory have something like ``MDISK 0123``.
  in: body
  required: false
  type: string
get_mdisk_disk_vdev:
  description:
    The virtual device number of the disk.
  in: body
  required: true
  type: string
guest_ipl_from:
  description: |
    Where the guest will IPL from. By default, it will IPL from
    ``CONF.zvm.user_root_vdev``. If this value is not empty,
    it will IPL from the given parameter, for example ``IPL CMS`` will IPL
    from CMS instead of device number.
  in: body
  required: false
  type: string
guest_ipl_param:
  description: |
    The parameter to add to IPL command, e.g. `IPL xxx PARM <guest_ipl_param>`.
  in: body
  required: false
  type: string
guest_ipl_loadparam:
  description: |
    The load parameter to add to IPL command, e.g. `IPL xxx LOADPARM <guest_ipl_loadparam>`.
  in: body
  required: false
  type: string
guest_dedicate_vdevs:
  description: |
    A list of device vdevs to dedicate to the guest.
  in: body
  required: false
  type: list
guest_loaddev:
  description: |
    The loaddev parameters to add in the guest directory. Current supported keys include
    ``portname``, ``lun`` and ``alterdev``. Both the ``portname`` and ``lun`` can specify
    only one one- to eight-byte hexadecimal value in the range of 0-FFFFFFFFFFFFFFFF.
    There is ``alterdev`` added only when the compute node z/VM supports multipath IPL feature.
  in: body
  required: false
  type: dict
guest_max_cpu:
  description: |
    The maximum number of virtual CPUs this user can define.
    The value should be an integer value between 1 and 64.
  in: body
  required: false
  type: integer
guest_max_mem:
  description: |
    The maximum size of memory the user can define.
    The value should be specified by 1 to 4 digits suffixed by
    either M (megabytes) or G (gigabytes). The number should be
    a whole number, e.g. 512M or 4G.
  in: body
  required: false
  type: string
additional_disk_guest:
  description: |
    A list of additional disks information for the guest.
    It has one dictionary that contain some of the below keys for
    each disk.
  in: body
  required: true
  type: list
size_disk:
  description: |
    size of disk, case insensitive, the unit can be in megabytes (M),
    gigabytes (G), or number of cylinders/blocks, for example
    ``512M``, ``1g``, or just ``2000``.
  in: body
  required: true
  type: string
format_disk:
  description: |
    Format of disk, can be ``ext2``, ``ext3``, ``ext4``, ``swap``, ``xfs``, ``none``.
    The file system ``none`` means that there is no need to create a file system,
    and in turn no format and partition table will be created, this is usually
    used for some systems such as z/OS.
  in: body
  required: false
  type: string
is_boot_disk:
  description: |
    Is boot disk or not. For the root disk, this key must be set to
    indicate the image that will be deployed on this disk.
  in: body
  required: false
  type: boolean
disk_pool_guest:
  description: |
    Disk pool. If not specified, the disk will be created by using
    the value from configuration file. The format is
    ``ECKD:eckdpoolname`` or ``FBA:fbapoolname``.
  in: body
  required: false
  type: string
disk_info:
  description: |
    A dict to describe disk information.
  in: body
  required: true
  type: dict
vdev_info:
  description: |
    A dict to describe vdev list to be deleted.
  in: body
  required: true
  type: dict
disk_vdev_list:
  description: |
    Disk vdev list of guest.
    It contains the vdevs tor delete, for example ``['0101','0102']``.
  in: body
  required: true
  type: list
disk_vdev:
  description: |
    The device number of the disk. If not specified, Feilong will use the next vdev
    of ``CONF.zvm.user_root_vdev`` as the additional disk's vdev. For example, if
    ``CONF.zvm.user_root_vdev`` is 0100, Feilong will use 0101 as the vdev for first
    additional disk in disk_info, and 0102 as the second additional disk's vdev.
  in: body
  required: false
  type: string
disk_mountpoint:
  description: |
    The directory on guest to which the additional disk will be mounted. If not specified,
    Feilong will use ``/mnt/ephemeral0`` as the mount point of first additional disk, and
    ``/mnt/ephemeral1`` as the mount point of second additional disk.
  in: body
  required: false
  type: string
format_disk_required:
  description: |
    Format of disk, can be ``ext2``, ``ext3``, ``ext4``, ``swap``, ``xfs``, ``none``.
    The file system ``none`` means that there is no need to create a file system,
    and in turn no format and partition table will be created, this is usually
    used for some systems such as z/OS.
  in: body
  required: true
  type: string
userid_list_guest:
  description: |
      A string that contains a single userid or userids delimited by commas,
      like ``id1, id2, id3``.
  in: path
  required: true
  type: string
stats_guest:
  description: |
    CPU and memory statistics of guests, as a dictionary where the
    key is the userid and the value is the CPU and memory statistics.
  in: body
  required: true
  type: dict
power_status_guest:
  description: |
    Power status of guest, can be either ``on`` or ``off``.
  in: body
  required: true
  type: string
cpu_time_us_guest:
  description: |
    The CPU time used in microseconds.
  in: body
  required: true
  type: integer
num_cpu_guest:
  description: |
    The count of virtual CPUs for the guest.
  in: body
  required: true
  type: integer
online_cpu_num_guest:
  description: |
    The count of online virtual CPUs for the guest.
  in: body
  required: true
  type: integer
os_distro_guest:
  description: |
    The OS distro information for the guest.
  in: body
  required: true
  type: string
kernel_info_guest:
  description: |
    The kernel information for the guest.
  in: body
  required: true
  type: string
action_start_guest:
  description: |
    Take ``start`` action on guest.
  in: body
  required: true
  type: string
action_stop_guest:
  description: |
    Take ``stop`` action on guest.
  in: body
  required: true
  type: string
action_softstop_guest:
  description: |
    Take ``softstop`` action on guest.
  in: body
  required: true
  type: string
action_pause_guest:
  description: |
    Take ``pause`` action on guest.
  in: body
  required: true
  type: string
action_unpause_guest:
  description: |
    Take ``unpause`` action on guest.
  in: body
  required: true
  type: string
action_reboot_guest:
  description: |
    Take ``reboot`` action on guest.
  in: body
  required: true
  type: string
action_reset_guest:
  description: |
    Take ``reset`` action on guest.
  in: body
  required: true
  type: string
action_deploy_guest:
  description: |
    Take ``deploy`` action on guest.
  in: body
  required: true
  type: string
action_capture_guest:
  description: |
    Take ``capture`` action on guest.
  in: body
  required: true
  type: string
action_grow_root_volume_guest:
  description: |
    Take ``grow_root_volume`` action on guest.
  in: body
  required: true
  type: string
action_get_console_guest:
  description: |
    Take ``get_console_output`` action on guest.
  in: body
  required: true
  type: string
action_live_migrate_guest:
  description: |
    Take ``live_migrate_vm`` action on guest.
  in: body
  required: true
  type: string
dest_zcc_userid:
  description: |
     The userid of zcc on destination node.
     Required if ``lgr_action`` equals ``move``.
  in: body
  required: false
  type: string
lgr_destination:
  description: |
     The system ID of the z/VM system to which
     the specified VM will be relocated or tested.
  in: body
  required: true
  type: string
lgr_parms:
  description: |
     A dictionary of options for relocation.
  in: body
  required: false
  type: dict
lgr_action:
  description: |
     Indicates the action is ``test`` or ``move`` for the live migration.
     ``test`` will test the guest is eligible to live migrate or not.
     ``move`` will live migrate the guest immediately.
  in: body
  required: true
  type: string
action_register_guest:
  description: |
    Take ``register_vm`` action on guest.
  in: body
  required: true
  type: string
guest_register_meta:
  description: |
    The metadata of the VM to be registered.
  in: body
  required: true
  type: string
guest_register_net_set:
  description: |
    Guest network configured or not.
    ``1`` means configured, ``0`` means not configured. Default as ``1``.
  in: body
  required: true
  type: string
guest_register_port_macs:
  description: |
    The dict of virtual interface port id and MAC id.
  in: body
  required: false
  type: dict
action_deregister_guest:
  description: |
    Take ``deregister_vm`` action on guest.
  in: body
  required: true
  type: string
action_live_resize_cpus_of_guest:
  description: |
    Take ``live_resize_cpus`` action on guest.
  in: body
  required: true
  type: string
action_resize_cpus_of_guest:
  description: |
    Take ``resize_cpus`` action on guest.
  in: body
  required: true
  type: string
cpu_cnt:
  description: |
    The number of virtual CPUs that the guest should
    have after resize. The value should be an
    positive integer between 1 and 64.
  in: body
  required: true
  type: integer
action_live_resize_mem_of_guest:
  description: |
    Take ``live_resize_mem`` action on guest.
  in: body
  required: true
  type: string
action_resize_mem_of_guest:
  description: |
    Take ``resize_mem`` action on guest.
  in: body
  required: true
  type: string
mem_size:
  description: |
    The size of memory that the guest should have after resize.
    The value should be specified by 1 to 4 digits suffixed by
    either M (megabytes) or G (gigabytes). The number should be
    an integer, e.g. 512M or 4G.
  in: body
  required: true
  type: string
vdev_guest:
  description: |
    NIC device number, 1 to 4 hexadecimal digits.
  in: path
  required: true
  type: string
host_info:
  description: |
    The dict of host information.
  in: body
  required: true
  type: dict
disk_pool:
  description: |
    The pool name to get pool information from.
  in: path
  required: false
  type: string
disk_info_total:
  description: |
    The total size of the pool in Gigabytes (G).
  in: body
  required: true
  type: integer
disk_info_available:
  description: |
    The total available size of the disks in the pool in Gigabytes(G).
  in: body
  required: true
  type: integer
disk_info_used:
  description: |
    The size of used disks in the pool in Gigabytes(G).
  in: body
  required: true
  type: integer
details:
  description: |
    Get the free space of all volumes on the disk pool or not.
  in: path
  required: false
  type: boolean
diskpool_volumes:
  description: |
    The volume list of the disk pool.
  in: body
  required: true
  type: string
volume:
  description: |
    The name of the volume.
  in: path
  required: true
  type: string
volume_type:
  description: |
    The type of the volume.
  in: body
  required: true
  type: string
volume_size:
  description: |
    The disk size of the volume.
  in: body
  required: true
  type: integer
host_ssi_info:
  description: |
    If the host is an SSI cluster member, it returns a list of SSI cluster
    information. If current host is not an SSI cluster member, it returns an empty list.
  in: body
  required: true
  type: list
image_info:
  description: |
    The image information for a specific image or all images.
    Each image has one dict to indicate its info.
  in: body
  required: true
  type: list
image_dict:
  description: |
    The image information dict.
  in: body
  required: true
  type: dict
image_name:
  description: |
    Image name that can be uniquely identify an image.
  in: body
  required: true
  type: string
image_name_path:
  description: |
    Image name that can be uniquely identify an image.
  in: path
  required: true
  type: string
image_md5sum:
  description: |
    md5sum for the specific image.
  in: body
  required: true
  type: string
image_import_url:
  description: |
    The location of the image to be imported. The image can be imported from 3
    types of locations\:

    - local file system, e.g. ``file:///opt/images/import.img``.
    - HTTP server, e.g. ``http://192.168.2.1/path/to/import.img``
    - file system on remote host: in this case both url and remote_host parameters
      should be specified.
  in: body
  required: true
  type: string
image_export_location:
  description: |
    The dictionary to indicate the location information of the image to be exported.
  in: body
  required: true
  type: dict
image_export_url:
  description: |
    The location of the exported image. The image can be exported to 2
    types of locations\:

    - local file system, e.g. ``file:///opt/images/export.img``
    - file system on remote host: in this case both dest_url and remote_host
      parameters should be specified.
  in: body
  required: true
  type: string
image_metadata:
  description: |
    The metadata that describes the image.
    The valid keys are os_version, md5sum, and disk_type.
    os_version is a required key, the valid values are: ``rhel7.x``,
    ``rhel8.x``, ``rhel9.x``, `sles12.x``, ``sles15.x``, ``sles16.x``,
    ``ubuntu20.x``, ``ubuntu22.x``, ``ubuntu24.x``, and ``rhcos4.x``,
    all case insensitive. Please contact your cloud administrator
    if you don't know the image's OS version. disk_type is required if
    os_version is ``rhcos4``, the valid disk_type values are: DASD, SCSI.
  in: body
  required: true
  type: dict
remotehost_image_import:
  description: |
    The server from where the image will be imported. If remote_host is None,
    the image will be imported from the URL in local server, otherwise,
    the format is username@ip, for example, ``nova@9.x.x.x`` or
    username@hostname, for example, ``test@test.ibm.com``.
  in: body
  required: false
  type: string
remotehost_image_export:
  description: |
    The server that the image will be export to, if remote_host is None,
    the image will be stored in the dest_path in local server, otherwise,
    the format is username@ip, for example, ``nova@9.x.x.x`` or
    username@hostname e.g.``test@test.ibm.com``.
  in: body
  required: false
  type: string
root_disk_size_image:
  description: |
    The image's root disk size in units CYL or BLK,
    e.g. ``3338:CYL`` or ``614200:BLK``.
  in: body
  required: true
  type: string
physical_disk_size_image:
  description: |
    Physical image size in bytes, e.g. ``5120000``.
  in: body
  required: true
  type: string
image_type:
  description: |
    How the image is generated, if it is captured from root disk the
    type is netboot.
  in: body
  required: true
  type: string
image_comments:
  description: |
    The comments for the image.
  in: body
  required: true
  type: string
export_image_dict:
  description: |
    The dict contains image information after it has been exported.
  in: body
  required: true
  type: dict
transportfiles:
  description: |
    The files path that used to customize the VM. For RHCOS image, the transportfiles
    is required and should be the ignition file.
  in: body
  required: false
  type: string
remotehost_transportfiles:
  description: |
    The server where the transportfiles is located. If remotehost is not
    specified, Feilong will deploy with the transport file in local server,
    otherwise, the format is username@ip, for example, ``nova@9.x.x.x``
    or username@hostname e.g.``test@test.ibm.com``.
  in: body
  required: false
  type: string
deploy_vdev:
  description: |
    Device number to which the image will be deployed, 1 to 4 hexadecimal
    digits. ``null`` is also allowed.
  in: body
  required: false
  type: string
deploy_hostname:
  description: |
    Hostname of the guest. Will be ignored if ``transportfiles`` is
    specified. ``null`` is also allowed.
  in: body
  required: false
  type: string
deploy_skipdiskcopy:
  description: |
    Whether to skip the copy of image to disk. Default value if False.
    If the value is True, the ``image_name`` specified should be the OS version.
    If the value is False, the ``image_name`` specified should be the name of the image
    to be used to copy to the root disk.
  in: body
  required: false
  type: boolean
capture_type:
  description: |
    The type of capture\:

    - ``rootonly``: indicate just root device will be captured, this is the default one
    - ``alldisks``: indicate all the devices of the userid will be captured
  in: body
  required: false
  type: string
compress_level:
  description: |
    The compression level of the image, default value is 6.
  in: body
  required: false
  type: integer
vswitch_name:
  description: |
    vswitch name.
  in: path
  required: true
  type: string
vswitch_name_body:
  description: |
    vswitch name.
  in: body
  required: true
  type: string
rdev_vswitch:
  description: |
    The real device number, a maximum of three devices. ``null`` is also allowed.
  in: body
  required: false
  type: string
controller_vswitch:
  description: |
    The vswitch's controller. It could be an userid or ``*`` to
    specify any available controller.
  in: body
  required: false
  type: string
connection_vswitch:
  description: |
    Connection type option\:

    - ``CONnect``: activate the real device connection.
    - ``DISCONnect``: do not active the real device connection.
    - ``NOUPLINK``: the vswitch will never have connectivity through.
  in: body
  required: false
  type: string
network_type_vswitch:
  description: |
    Specifies the transport mechanism to be used for the switch,
    ``IP`` or ``ETHERNET``. Default is ``ETHERNET``.
  in: body
  required: false
  type: string
router_vswitch:
  description: |
    Connection type option\:

    - ``NONROUTER``: The OSA-Express device identified in
      real_device_address will not act as a router to the vswitch.
    - ``PRIROUTER``: The OSA-Express device identified in
      real_device_address will act as a primary router to the vswitch.
    - ``Note``: If the network_type is ``ETHERNET``, this value must be
      unspecified, otherwise, if this value is unspecified,
      default is ``NONROUTER``.
  in: body
  required: false
  type: string
vid_vswitch:
  description: |
    The VLAN id. This can be any of the following values\:
    ``UNAWARE``, ``AWARE``, or ``1-4094``.
  in: body
  required: false
  type: string, integer
port_type_vswitch:
  description: |
    Port type\:

    - ``ACCESS``: The default porttype attribute for
      guests authorized for the virtual switch.
      The guest is unaware of VLAN IDs and sends and
      receives only untagged traffic.
    - ``TRUNK``: The default porttype attribute for
      guests authorized for the virtual switch.
      The guest is VLAN aware and sends and receives tagged
      traffic for those VLANs to which the guest is authorized.
      If the guest is also authorized to the natvid, untagged
      traffic sent or received by the guest is associated with
      the native VLAN ID (natvid) of the virtual switch.
  in: body
  required: false
  type: string
gvrp_vswitch:
  description: |
    GVRP\:

    - ``GVRP``: Indicates that the VLAN IDs in use on the virtual
      switch should be registered with GVRP-aware switches on the
      LAN. This provides dynamic VLAN registration and VLAN
      registration removal for networking switches. This
      eliminates the need to manually configure the individual
      port VLAN assignments.
    - ``NOGVRP``: Do not register VLAN IDs with GVRP-aware switches on
      the LAN. When NOGVRP is specified VLAN port assignments
      must be configured manually.
  in: body
  required: false
  type: string
queue_mem_vswitch:
  description: |
    A number between 1 and 8, specifying the QDIO
    buffer size in megabytes.
  in: body
  required: false
  type: integer
native_vid_vswitch:
  description: |
    The native vlan id, 1-4094 or ``null``.
  in: body
  required: false
  type: integer
persist_option_vswitch:
  description: |
    Whether to create the vswitch in the permanent
    configuration of the system.
  in: body
  required: false
  type: boolean
vswitch_list:
  description: |
    List of vswitches.
  in: body
  required: true
  type: list
grant_userid:
  description: |
    Guest userid.
  in: body
  required: true
  type: string
imagename:
  description: |
    Retrieve the specified image information, if not specified,
    when list image, all images information will be returned.
  in: path
  required: false
  type: string
guest_userid_opt:
  description: |
    Guest userid.
  in: path
  required: False
  type: string
nic_id_opt:
  description: |
    NIC identifier.
  in: path
  required: False
  type: string
vswitch_name_opt:
  description: |
    vswitch name.
  in: path
  required: False
  type: string
guests_nic_info:
  description: |
    List describing NIC information. Each NIC has one dict
    to indicate its info, including userid, interface,
    switch, port id and comments.
  in: body
  required: true
  type: list
nic_set_info:
  description: |
    The information which is used to set NIC device number.
  in: body
  required: true
  type: dict
vdev_number:
  description: |
    NIC device number, 1 to 4 hexadecimal digits.
  in: body
  required: false
  type: string
vdev_number_orNone:
  description: |
    NIC device number, 1 to 4 hexadecimal digits. ``null`` is also allowed.
  in: body
  required: false
  type: string
nic_identifier:
  description: |
    NIC identifier
  in: body
  required: false
  type: string
mac_address:
  description: |
    MAC address, it is only used when changing the guest's user directory.
    Format should be xx:xx:xx:xx:xx:xx, where x is a hexadecimal digit.
  in: body
  required: false
  type: string
ip_address:
  description: |
    IP address.
  in: body
  required: false
  type: string
active_flag:
  description: |
    Whether the change will apply to the active guest.
  in: body
  required: false
  type: boolean
couple_info:
  description: |
    The information used to describe the couple/uncouple action.
  in: body
  required: true
  type: dict
couple_action:
  description: |
    couple or uncouple action.
  in: body
  required: true
  type: boolean
vswitch_name_body_opt:
  description: |
    vswitch name.
  in: body
  required: false
  type: string
network_interface_info:
  description: |
    The information which is used to describe network interface.
  in: body
  required: true
  type: dict
guest_os_version:
  description: |
    Operating system version. The valid values are: ``rhel7.x``,
    ``rhel8.x``, ``rhel9.x``, ``sles12.x``, ``sles15.x``, ``sles16.x``,
    ``ubuntu20.x``, ``ubuntu22.x``, ``ubuntu24.x``, and ``rhcos4.x``,
    all case insensitive. Please contact your cloud administrator
    if you don't know the guest's OS version.
  in: body
  required: true
  type: string
guest_networks_list:
  description: |
    Network information list of guest. It has one dictionary that contain some of the below
    keys for each interface. All the keys are optional\:

    - ``ip_addr``: the IP address of the interface, ``cidr`` is required if IP address
       is set
    - ``dns_addr``: DNS servers address list
    - ``gateway_addr``: gateway address
    - ``cidr``: CIDR format
    - ``nic_vdev``: NIC device number, 1 to 4 hexadecimal digits
    - ``mac_addr``: MAC address
    - ``nic_id``: NIC identifier
    - ``osa_device``: OSA device number, 1 to 4 hexadecimal digits
    - ``hostname``: host name
  in: body
  required: true
  type: list
guest_networks:
  description: |
    Required only if refresh volume bootmap for RHCOS.
    Network information list of guest. It has one dictionary that contain some of the below
    keys for each interface. All the keys are optional\:

    - ``ip_addr``: the IP address of the interface, ``cidr`` is required if IP address
      is set
    - ``dns_addr``: DNS servers address list
    - ``gateway_addr``: gateway address
    - ``cidr``: cidr format
    - ``nic_vdev``: NIC device number, 1 to 4 hexadecimal digits
    - ``mac_addr``: MAC address
    - ``nic_id``: NIC identifier
    - ``osa_device``: OSA device number, 1 to 4 hexadecimal digits
    - ``hostname``: the hostname of the guest
  in: body
  required: false
  type: list
vswitch_info:
  description: |
    The vswitch update info.
  in: body
  required: true
  type: dict
user_vlan_id:
  description: |
    A dict to describe guest userid and VLAN id.
  in: body
  required: true
  type: dict
vlan_id:
  description: |
    The VLAN id. This can be any of the value between -1 or 1-4094.
  in: body
  required: true
  type: integer
nic_comments:
  description: |
    The comments for the NIC.
  in: body
  required: true
  type: string
nic_port:
  description: |
    NIC identifier.
  in: body
  required: true
  type: string
nic_userid:
  description: |
    The userid of the NIC.
  in: body
  required: true
  type: string
nic_interface:
  description: |
    The device number of the NIC.
  in: body
  required: true
  type: string
vswitch_details:
  description: |
    The vswitch information for specific vswitch.
  in: body
  required: true
  type: dict
file_request_header:
  description: |
    The media type descriptor for the request body. Use ``application/octet-stream``.
  in: header
  required: true
  type: string
file_import_output:
  description: |
    Dictionary describing the file import status and result.
  in: body
  required: true
  type: dict
file_import_dest_url:
  description: |
    The location of file after it has been imported into Feilong. For example,
    ``file:///var/lib/zvmsdk/files/imported/be919b98-8408-11e8-b9fe-020001000053``.
  in: body
  required: true
  type: string
imported_file_size:
  description: |
    The physical file size in bytes.
  in: body
  required: true
  type: integer
file_md5sum:
  description: |
    The md5sum of the file after it has been imported.
  in: body
  required: true
  type: string
export_source_file:
  description: |
    The path of the file to be exported, e.g. ``/root/testfile``.
  in: body
  required: true
  type: string
volume_info:
  description: |
    A dict to describe connection information of the volume.
  in: body
  required: true
  type: dict
volume_conn:
  description: |
    A dict to describe information of the volume to be operated.
  in: body
  required: true
  type: dict
volume_fcp:
  description: |
    FCP Device number, for example ``1fc5``.
  in: path
  required: true
  type: string
volume_wwpn:
  description: |
    World Wide Port Numbers, must start with ``0x``, for example ``0x50050763050b073d``.
  in: body
  required: true
  type: list
volume_lun:
  description: |
    Logical Unit Number, must start with ``0x``, for example ``0x4020400100000000``.
  in: body
  required: true
  type: string
guest_multipath:
  description: |
    Multipath service is open or not.
  in: body
  required: true
  type: boolean
mount_point:
  description: |
    The symbolic link name of the volume device. If not assigned, will be assigned by the OS in VM.
  in: body
  required: false
  type: string
root_volume:
  description: |
    Volume is bootable or not.
  in: body
  required: false
  type: boolean
update_connections_only:
  description: |
    Update connections in database only, do not undedicate in CP.
  in: body
  required: false
  type: boolean
do_rollback:
  description: |
    Roll back will be done if any phase fails.
    Default is True.
  in: body
  required: false
  type: boolean
disk_list_output:
  description: |
    A list of created disks information for the guest.
    It has one dictionary that contain some of the below keys for each disk.
  in: body
  required: true
  type: list
vdev_disk:
  description: |
    Device number of the disk, 1 to 4 hexadecimal digits.
  in: body
  required: true
  type: string
rdev_disk:
  description: |
    The real device number of the disk.
  in: body
  required: true
  type: string
access_type:
  description: |
    Type of access to the disk, either ``R/O`` or ``R/W``.
  in: body
  required: true
  type: string
disk_pool_output:
  description: |
    Disk pool. The format is ``ECKD:eckdpoolname`` or ``FBA:fbapoolname``.
  in: body
  required: true
  type: string
size_output:
  description: |
    Size of disk, case insensitive. The unit can be in megabytes (M)
    or gigabytes (G), for example ``512M`` or ``1g``.
  in: body
  required: true
  type: string
size_no_unit:
  description: |
    The size of the disk, without unit.
  in: body
  required: true
  type: integer
device_units:
  description: |
    The unit for the size of the disk, for example ``Cylinders``.
  in: body
  required: true
  type: string
volume_label:
  description: |
    The volume label of the disk.
  in: body
  required: true
  type: string
last_access_time:
  description: |
    The time stamp of last access time of this image.
    The seconds count is after 1970 and is generated from python ``time`` module.
  in: body
  required: true
  type: float
fcp_userid:
  description: |
    Guest userid.
  in: body
  required: true
  type: string
fcp_usage:
  description: |
    FCP usage, as a list with 4 entries\:

    - the userid this FCP belongs to
    - 0 or 1, represents whether the FCP is being used or not
    - the count of volumes on this FCP
    - the FCP template id used to create this FCP
  in: body
  required: true
  type: list
fcp_list:
  description: |
    FCP devices list.
  in: body
  required: true
  type: list
fcp_template_id:
  description: |
    FCP template identifier.
  in: body
  required: true
  type: string
fcp_template_id_path:
  description: |
    FCP template identifier.
  in: path
  required: true
  type: string
fcp_template:
  description: |
    Various attibutes of the FCP template.
  in: body
  required: true
  type: dict
fcp_template_name:
  description: |
    Name of FCP template.
  in: body
  required: true
  type: string
fcp_template_name_optional:
  description: |
    Name of FCP template.
  in: body
  required: false
  type: string
fcp_template_description:
  description: |
    Description of FCP template, e.g. "Two paths template".
  in: body
  required: false
  type: string
fcp_template_description_output:
  description: |
    Description of FCP template, e.g. "Two paths template".
  in: body
  required: true
  type: string
fcp_template_fcp_devices:
  description: |
    FCP devices list. '-' indicates a range, and ';' is a separator.
    Example\: "0011-0013;0015;0017-0018".
  in: body
  required: false
  type: string
fcp_template_host_default:
  description: |
    This template is the default template for the host or not.
  in: body
  required: false
  type: boolean
fcp_template_host_default_output:
  description: |
    This template is the default template for the host or not.
  in: body
  required: true
  type: boolean
fcp_template_sp_default:
  description: |
    List of storage providers for which this is the default.
  in: body
  required: true
  type: list
fcp_template_storage_providers:
  description: |
    List of storage providers.
  in: body
  required: false
  type: list
fcp_template_storage_providers_output:
  description: |
    List of storage providers.
  in: body
  required: true
  type: list
fcp_template_default_sp_list:
  description: |
    List of storage providers for which this template is the default.
  in: body
  required: false
  type: list
fcp_template_min_fcp_paths_count:
  description: |
    Minimum number of multipath paths.
  in: body
  required: false
  type: integer
fcp_template_min_fcp_paths_count_output:
  description: |
    Minimum number of multipath paths.
  in: body
  required: true
  type: integer
template_id_list:
  description: |
    Restrict output to some FCP template ids.
    If omitted, no restriction on template ids.
  in: parameter
  required: false
  type: list
userid_in_params:
  description: |
    Restrict output to some userids.
    If omitted, no restriction on userids.
  in: parameter
  required: false
  type: string
default_sp_list:
  description: |
    Restrict output to the storage providers for which this is the default template.
    If omitted, no restriction on storage providers.
  in: parameter
  required: false
  type: string
host_default:
  description: |
    Restrict output to the hosts for which this is the default template.
    If omitted, no restriction on hosts.
  in: parameter
  required: false
  type: string
fcp_details_raw:
  description: |
    For each FCP, provides raw data, if it was requested.
  in: body
  required: false
  type: dict
fcp_details_statistics:
  description: |
    For each FCP, provides the following statistics, if it was requested:
    ``total``, ``total_count``, ``single_fcp``, ``range_fcp``, ``available``,
    ``available_count``, ``allocated``, ``reserve_only``, ``connection_only``,
    ``unallocated_but_active``, ``allocated_but_free``, ``notfound``, ``offline``,
    ``chids``, and ``pchids``.
  in: body
  required: false
  type: dict
cpc_sn:
  description: |
    Central Processor Complex serial number.
  in: body
  required: true
  type: string
cpc_name:
  description: |
    Central Processor Complex name.
  in: body
  required: true
  type: string
lpar:
  description: |
    Logical Partition.
  in: body
  required: true
  type: string
hypervisor_hostname:
  description: |
    Name of z/VM hypervisor.
  in: body
  required: true
  type: string
pchids:
  description: |
    Physical Channel identifiers.
  in: body
  required: true
  type: list
wwpn_list:
  description: |
    World Wide Port Name identifiers.
  in: body
  required: true
  type: list
lun:
  description: |
    Logical Unit Number identifier.
  in: body
  required: true
  type: string
adapters_info_output:
  description: |
    A list of adapters information for the guest.
    It has one or more dictionaries that contain some of the below keys.
    One dictionary represents one adapter.
  in: body
  required: true
  type: list
adapter_status:
  description: |
    Status of adapter, 2 hexadecimal digits. ``02`` means normal.
  in: body
  required: true
  type: string
ip_version:
  description: |
    Version of IP address, ``4`` means IPv4, ``6`` means IPv6.
  in: body
  required: true
  type: string
fcp_reserve:
  description: |
    Whether or not reserve the FCP devices.
  in: body
  required: true
  type: boolean
fcp_reserved:
  description: |
    If value is 1, means this FCP device is used by an userid.
    If value is 0, means this FCP device can be operated.
  in: body
  required: true
  type: integer
storage_provider:
  description: |
    Storage provider.
  in: body
  required: true
  type: string
pchid_info:
  description: |
    Information on physical channel identifier.
  in: body
  required: true
  type: dict
fcp_connections:
  description: |
    The count of volumes on this FCP device.
  in: body
  required: true
  type: integer
SMAPI:
  description: |
    Status of SMAPI health.
  in: body
  required: true
  type: dict
totalSuccess:
  description: |
    The total success calls for SMAPI.
  in: body
  required: true
  type: integer
totalFail:
  description: |
    The total fail calls for SMAPI.
  in: body
  required: true
  type: integer
lastSuccess:
  description: |
    The last success call for SMAPI.
  in: body
  required: true
  type: string
lastFail:
  description: |
    The last fail call for SMAPI.
  in: body
  required: true
  type: string
continuousFail:
  description: |
    The count of continuous fails.
  in: body
  required: true
  type: integer
healthy:
  description: |
    Whether SMAPI is healthy.
  in: body
  required: true
  type: boolean
guest_cpus:
  description: |
    The count of virtual CPUs for the guest.
  in: body
  required: true
  type: integer
used_cpu_time_us:
  description: |
    The CPU time used in microseconds.
  in: body
  required: true
  type: integer
elapsed_cpu_time_us:
  description: |
    The CPU time elapsed in microseconds.
  in: body
  required: true
  type: integer
min_cpu_count:
  description: |
    The minimal count of virtual CPUs allowed.
  in: body
  required: true
  type: integer
max_cpu_limit:
  description: |
    The maximal count of virtual CPUs allowed.
  in: body
  required: true
  type: integer
samples_cpu_in_use:
  description: |
    Samples CPU in use.
  in: body
  required: true
  type: integer
samples_cpu_delay:
  description: |
    Samples CPU delay.
  in: body
  required: true
  type: integer
used_mem_kb:
  description: |
    Memory size used by the guest, in kilobytes.
  in: body
  required: true
  type: integer
max_mem_kb:
  description: |
    The maximum memory in kilobytes that can be allocated for this guest.
  in: body
  required: true
  type: integer
min_mem_kb:
  description: |
    The maximum memory in kilobytes that can be allocated for this guest.
  in: body
  required: true
  type: integer
shared_mem_kb:
  description: |
    Shared memory in kilobytes.
  in: body
  required: true
  type: integer
total_memory:
  description: |
    Total memory.
  in: body
  required: true
  type: integer
available_memory:
  description: |
    Available memory.
  in: body
  required: true
  type: integer
free_memory:
  description: |
    Free memory.
  in: body
  required: true
  type: integer
nic_fr_rx:
  description: |
    Number of received frames.
  in: body
  required: true
  type: integer
nic_fr_tx:
  description: |
    Number of transmitted frames.
  in: body
  required: true
  type: integer
nic_fr_rx_dsc:
  description: |
    Number of received frames that have been discarded.
  in: body
  required: true
  type: integer
nic_fr_tx_dsc:
  description: |
    Number of transmitted frames that have been discarded.
  in: body
  required: true
  type: integer
nic_fr_rx_err:
  description: |
    Number of received frames that were in error.
  in: body
  required: true
  type: integer
nic_fr_tx_err:
  description: |
    Number of transmitted frames that were in error.
  in: body
  required: true
  type: integer
nic_rx:
  description: |
    Number of received bytes.
  in: body
  required: true
  type: integer
nic_tx:
  description: |
    Number of transmitted bytes.
  in: body
  required: true
  type: integer
port_id:
  description: |
    The ID of the port.
  in: body
  required: true
  type: string
